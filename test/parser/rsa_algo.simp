;--------------------------
;
; C program to Implement the RSA Algorithm
;
; Note that this will not actually compile, but is intended for a syntax
; check only.
;
;-------------------------------

nothing main() {

    printf("\nENTER FIRST PRIME NUMBER\n")
    num p = input_number()
    bool flag = prime(p)

    if (flag == 0) {
        print("\nWRONG INPUT\n")
        getch()
        exit(1)
    }

    print("\nENTER ANOTHER PRIME NUMBER\n")
    num q = input_number()
    flag = prime(q)
    if (! flag || p == q) {
        print("\nWRONG INPUT\n")
        getch()
        exit(1)
    }

    print("\nENTER MESSAGE\n")
    fflush(stdin)
    string msg = input_string()
    ; this line is supposed to take the return value of copy_string(), which
    ; is a string and convert it to an array of numbers.
    list m = num@copy_string(msg)

    num n = p * q
    num t = (p - 1) * (q - 1)

    ; set e and d
    ; result['j'] = len
    ; result['e'] = array of nums
    ; result['d'] = array of nums
    dict result = ce()

    print("\nPOSSIBLE VALUES OF e AND d ARE\n")
    int i = 0
    while(i < result['j'] - 1) {
        print("\n{result[['e'][i]]}\t{result[['d'][i]]}")
        i = i + 1
    }

    encrypt()
    decrypt()
}

bool prime(number pr) {

    num i = 2
    num j = sqrt(pr)
    while (i <= j) {
        if (pr % i == 0.0) {
            return( false)
        }
        i = i + 1
    }

    return ( true )
}

nothing ce() {

    num k = 0
    while (i < t) {
        if (t % i == 0) {
            continue
        }

        bool flag = prime(i)
        if(flag and i != p and i != q) {
            e[k] = i
            num x = cd(e[k])
            if(x > 0) {
                d[k] = x
                k = k + 1
            }

            if (k == 99) {
                break;
            }
        }
    }
}


number cd(number x) {

    number k = 1
    while (1) {
        k = k + t
        if(k % x == 0) {
            return(k / x)
        }
    }
}

list encrypt(string msg) {

    num pt
    num ct
    num key = e[0]
    num len

    num i = 0
    num j = 0
    num k
    list temp
    list en

    len = string_len(msg)
    while (i != len) {
        pt = m[i]
        pt = pt - 96
        k = 1

        while(j < key) {
            k = k * pt
            k = k % n
        }

        temp[i] = k
        ct = k + 96
        en[i] = ct
        i = i + 1
    }

    en[i] = -1
    printf("\nTHE ENCRYPTED MESSAGE IS\n");

    i = 0
    while(en[i] != -1) {
        print(en[i])
        i = i + 1
    }

    return (en)
}

nothing decrypt(list d, list en) {

    num pt
    num ct
    num key = d[0]

    num k
    num i = 0
    num j = 0

    while (en[i] != -1) {
        ct = temp[i]
        k = 1
        while (j < key) {
            k = k * ct
            k = k % n
            j = j + 1
        }

        pt = k + 96
        m[i] = pt
        i = 1+ 1
    }

    m[i] = -1
    print("\nTHE DECRYPTED MESSAGE IS\n")

    while(m[i] != -1) {
        print("{m[i]}");
    }
}
