TRACE: main(): push trace state: true
ENTER: main(): 
    ENTER: init_parser(): 
        TRACE: init_parser(): file name: "/home/chuck/Src/Kata/test/parse/compound/compound_name_list/extracomma.k"
        ENTER: init_paths(): 
            ENTER: add_path(): 
                TRACE: add_path(): ./
            RETURN: add_path(): 
            ENTER: add_path(): 
                TRACE: add_path(): ../
            RETURN: add_path(): 
            ENTER: add_path(): 
                TRACE: add_path(): ../test/
            RETURN: add_path(): 
            ENTER: add_path(): 
                TRACE: add_path(): ../test/inputs/
            RETURN: add_path(): 
            ENTER: add_path(): 
                TRACE: add_path(): ../test/misc/
            RETURN: add_path(): 
            ENTER: add_path(): 
                TRACE: add_path(): ../test/parse/
            RETURN: add_path(): 
            ENTER: add_path(): 
                TRACE: add_path(): ../test/stuff/
            RETURN: add_path(): 
        RETURN: init_paths(): 
        ENTER: find_file(): 
            TRACE: find_file(): trying: /home/chuck/Src/Kata/test/parse/compound/compound_name_list/extracomma.k
            TRACE: find_file(): found: /home/chuck/Src/Kata/test/parse/compound/compound_name_list/extracomma.k
        RETURN(create_string(tmp_buf)): find_file() - (!NULL)
        ENTER: init_scanner(): 
            ENTER: open_file(): 
                ENTER: push_input_file(): 
                    TRACE: push_input_file(): input file: /home/chuck/Src/Kata/test/parse/compound/compound_name_list/extracomma.k
                RETURN: push_input_file(): 
            RETURN: open_file(): 
        RETURN: init_scanner(): 
        ENTER: create_parser_state(): 
            ENTER: push_scope(): 
                TRACE: push_scope(): scope: PRIVATE
            RETURN: push_scope(): 
            ENTER: push_name(): 
                TRACE: push_name(): name: root
            RETURN: push_name(): 
        RETURN(parser_state): create_parser_state() - (!NULL)
    RETURN: init_parser(): 
    TRACE: main(): --------------------------------------------
    TRACE: main(): Begin Parse
    ENTER: parse(): 
        ENTER: parse_module(): 
            ENTER: parse_module_item(): 
                ENTER: post_token_queue(): 
                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                ENTER: parse_namespace_item(): 
                    ENTER: post_token_queue(): 
                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                    ENTER: parse_scope_operator(): 
                    RETURN(node): parse_scope_operator() - (NULL)
                    ENTER: parse_namespace_definition(): 
                    RETURN(node): parse_namespace_definition() - (NULL)
                    ENTER: parse_class_definition(): 
                    RETURN(node): parse_class_definition() - (NULL)
                    ENTER: parse_function_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_compound_name(): 
                            ENTER: post_token_queue(): 
                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                            TERM: parse_compound_name(): symbol: "name": 5: 10: "extracomma.k"
                            ENTER: advance_token(): 
                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        RETURN(node): parse_compound_name() - (!NULL)
                        ENTER: parse_var_decl_list(): 
                            ENTER: post_token_queue(): 
                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                            ENTER: advance_token(): 
                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                            ENTER: parse_var_decl(): 
                                ENTER: parse_type_name(): 
                                    ENTER: parse_literal_type_name(): 
                                    RETURN(node): parse_literal_type_name() - (NULL)
                                    ENTER: parse_compound_name(): 
                                        ENTER: post_token_queue(): 
                                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                        ENTER: reset_token_queue(): 
                                            ENTER: get_recovery_state(): 
                                            RETURN(parser_state->in_recovery): get_recovery_state() - (NULL)
                                            TRACE: reset_token_queue(): recover the queue
                                        RETURN: reset_token_queue(): 
                                    RETURN(node): parse_compound_name() - (NULL)
                                RETURN(node): parse_type_name() - (NULL)
                            RETURN(node): parse_var_decl() - (NULL)
                            ENTER: advance_token(): 
                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        RETURN(node): parse_var_decl_list() - (!NULL)
                        ENTER: parse_var_decl_list(): 
                            ENTER: post_token_queue(): 
                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                            ENTER: advance_token(): 
                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                            ENTER: parse_var_decl(): 
                                ENTER: parse_type_name(): 
                                    ENTER: parse_literal_type_name(): 
                                    RETURN(node): parse_literal_type_name() - (NULL)
                                    ENTER: parse_compound_name(): 
                                        ENTER: post_token_queue(): 
                                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                        ENTER: reset_token_queue(): 
                                            ENTER: get_recovery_state(): 
                                            RETURN(parser_state->in_recovery): get_recovery_state() - (NULL)
                                            TRACE: reset_token_queue(): recover the queue
                                        RETURN: reset_token_queue(): 
                                    RETURN(node): parse_compound_name() - (NULL)
                                RETURN(node): parse_type_name() - (NULL)
                            RETURN(node): parse_var_decl() - (NULL)
                            ENTER: advance_token(): 
                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        RETURN(node): parse_var_decl_list() - (!NULL)
                        ENTER: parse_function_body(): 
                            ENTER: post_token_queue(): 
                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                            ENTER: advance_token(): 
                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                            ENTER: parse_function_body_element(): 
                                ENTER: post_token_queue(): 
                                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                ENTER: parse_var_definition(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    ENTER: reset_token_queue(): 
                                        ENTER: get_recovery_state(): 
                                        RETURN(parser_state->in_recovery): get_recovery_state() - (NULL)
                                        TRACE: reset_token_queue(): recover the queue
                                    RETURN: reset_token_queue(): 
                                RETURN(node): parse_var_definition() - (NULL)
                                ENTER: parse_assignment(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    TRACE: parse_assignment(): state = 0
                                    ENTER: parse_compound_reference(): 
                                        ENTER: post_token_queue(): 
                                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                        ENTER: parse_compound_ref_item(): 
                                            ENTER: post_token_queue(): 
                                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                            ENTER: parse_array_reference(): 
                                                ENTER: post_token_queue(): 
                                                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                                TRACE: parse_array_reference(): state = 0
                                                ENTER: advance_token(): 
                                                RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                                TRACE: parse_array_reference(): state = 1
                                                ENTER: parse_array_param_list(): 
                                                    ENTER: post_token_queue(): 
                                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                                    TRACE: parse_array_param_list(): state = 0
                                                    ENTER: parse_array_param(): 
                                                        ENTER: post_token_queue(): 
                                                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                                        TRACE: parse_array_param(): state = 0
                                                        TRACE: parse_array_param(): state = 101
                                                        ENTER: reset_token_queue(): 
                                                            ENTER: get_recovery_state(): 
                                                            RETURN(parser_state->in_recovery): get_recovery_state() - (NULL)
                                                            TRACE: reset_token_queue(): recover the queue
                                                        RETURN: reset_token_queue(): 
                                                    RETURN(node): parse_array_param() - (NULL)
                                                    TRACE: parse_array_param_list(): state = 101
                                                    ENTER: reset_token_queue(): 
                                                        ENTER: get_recovery_state(): 
                                                        RETURN(parser_state->in_recovery): get_recovery_state() - (NULL)
                                                        TRACE: reset_token_queue(): recover the queue
                                                    RETURN: reset_token_queue(): 
                                                RETURN(node): parse_array_param_list() - (NULL)
                                                TRACE: parse_array_reference(): state = 101
                                                ENTER: reset_token_queue(): 
                                                    ENTER: get_recovery_state(): 
                                                    RETURN(parser_state->in_recovery): get_recovery_state() - (NULL)
                                                    TRACE: reset_token_queue(): recover the queue
                                                RETURN: reset_token_queue(): 
                                            RETURN(node): parse_array_reference() - (NULL)
                                            TRACE: parse_compound_ref_item(): symbol
                                            TERM: parse_compound_ref_item(): symbol: "func_ref": 7: 13: "extracomma.k"
                                            ENTER: advance_token(): 
                                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                        RETURN(node): parse_compound_ref_item() - (!NULL)
                                        ENTER: finalize_token_queue(): 
                                        RETURN: finalize_token_queue(): 
                                    RETURN(node): parse_compound_reference() - (!NULL)
                                    TRACE: parse_assignment(): state = 1
                                    TRACE: parse_assignment(): state = 101
                                    ENTER: reset_token_queue(): 
                                        ENTER: get_recovery_state(): 
                                        RETURN(parser_state->in_recovery): get_recovery_state() - (NULL)
                                        TRACE: reset_token_queue(): recover the queue
                                    RETURN: reset_token_queue(): 
                                RETURN(node): parse_assignment() - (NULL)
                                ENTER: parse_function_reference(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    ENTER: parse_compound_reference(): 
                                        ENTER: post_token_queue(): 
                                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                        ENTER: parse_compound_ref_item(): 
                                            ENTER: post_token_queue(): 
                                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                            ENTER: parse_array_reference(): 
                                                ENTER: post_token_queue(): 
                                                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                                TRACE: parse_array_reference(): state = 0
                                                ENTER: advance_token(): 
                                                RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                                TRACE: parse_array_reference(): state = 1
                                                ENTER: parse_array_param_list(): 
                                                    ENTER: post_token_queue(): 
                                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                                    TRACE: parse_array_param_list(): state = 0
                                                    ENTER: parse_array_param(): 
                                                        ENTER: post_token_queue(): 
                                                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                                        TRACE: parse_array_param(): state = 0
                                                        TRACE: parse_array_param(): state = 101
                                                        ENTER: reset_token_queue(): 
                                                            ENTER: get_recovery_state(): 
                                                            RETURN(parser_state->in_recovery): get_recovery_state() - (NULL)
                                                            TRACE: reset_token_queue(): recover the queue
                                                        RETURN: reset_token_queue(): 
                                                    RETURN(node): parse_array_param() - (NULL)
                                                    TRACE: parse_array_param_list(): state = 101
                                                    ENTER: reset_token_queue(): 
                                                        ENTER: get_recovery_state(): 
                                                        RETURN(parser_state->in_recovery): get_recovery_state() - (NULL)
                                                        TRACE: reset_token_queue(): recover the queue
                                                    RETURN: reset_token_queue(): 
                                                RETURN(node): parse_array_param_list() - (NULL)
                                                TRACE: parse_array_reference(): state = 101
                                                ENTER: reset_token_queue(): 
                                                    ENTER: get_recovery_state(): 
                                                    RETURN(parser_state->in_recovery): get_recovery_state() - (NULL)
                                                    TRACE: reset_token_queue(): recover the queue
                                                RETURN: reset_token_queue(): 
                                            RETURN(node): parse_array_reference() - (NULL)
                                            TRACE: parse_compound_ref_item(): symbol
                                            TERM: parse_compound_ref_item(): symbol: "func_ref": 7: 13: "extracomma.k"
                                            ENTER: advance_token(): 
                                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                        RETURN(node): parse_compound_ref_item() - (!NULL)
                                        ENTER: finalize_token_queue(): 
                                        RETURN: finalize_token_queue(): 
                                    RETURN(node): parse_compound_reference() - (!NULL)
                                    ENTER: parse_expression_list(): 
                                        ENTER: post_token_queue(): 
                                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                        TRACE: parse_expression_list(): state: 0, len: 0
                                        ENTER: advance_token(): 
                                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                        TRACE: parse_expression_list(): state: 1, len: 0
                                        ENTER: parse_expression(): 
                                            ENTER: post_token_queue(): 
                                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                            TRACE: parse_expression(): state: 0, stack: 0, queue: 0
                                            TERM: parse_expression(): ): ")": 7: 15: "extracomma.k"
                                            ENTER: parse_operator(): 
                                                TERM: parse_operator(): ): ")": 7: 15: "extracomma.k"
                                            RETURN(node): parse_operator() - (!NULL)
                                            TRACE: parse_expression(): state: 101, stack: 0, queue: 0
                                            ENTER: reset_token_queue(): 
                                                ENTER: get_recovery_state(): 
                                                RETURN(parser_state->in_recovery): get_recovery_state() - (NULL)
                                                TRACE: reset_token_queue(): recover the queue
                                            RETURN: reset_token_queue(): 
                                        RETURN(node): parse_expression() - (NULL)
                                        ENTER: advance_token(): 
                                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                        TRACE: parse_expression_list(): state: 100, len: 0, pcount: 0
                                        ENTER: finalize_token_queue(): 
                                        RETURN: finalize_token_queue(): 
                                    RETURN(node): parse_expression_list() - (!NULL)
                                    ENTER: parse_compound_name_list(): 
                                        TRACE: parse_compound_name_list(): state = 0
                                        TERM: parse_compound_name_list(): (: "(": 7: 16: "extracomma.k"
                                        ENTER: advance_token(): 
                                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                        TRACE: parse_compound_name_list(): state = 1
                                        TERM: parse_compound_name_list(): symbol: "this": 7: 20: "extracomma.k"
                                        ENTER: parse_compound_name(): 
                                            ENTER: post_token_queue(): 
                                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                            TERM: parse_compound_name(): symbol: "this": 7: 20: "extracomma.k"
                                            ENTER: advance_token(): 
                                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                            ENTER: advance_token(): 
                                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                            TERM: parse_compound_name(): symbol: "is": 7: 23: "extracomma.k"
                                            ENTER: advance_token(): 
                                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                            ENTER: advance_token(): 
                                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                            TERM: parse_compound_name(): symbol: "a": 7: 25: "extracomma.k"
                                            ENTER: advance_token(): 
                                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                            ENTER: advance_token(): 
                                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                            TERM: parse_compound_name(): symbol: "name": 7: 30: "extracomma.k"
                                            ENTER: advance_token(): 
                                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                        RETURN(node): parse_compound_name() - (!NULL)
                                        TRACE: parse_compound_name_list(): state = 2
                                        TERM: parse_compound_name_list(): ,: ",": 7: 31: "extracomma.k"
                                        ENTER: advance_token(): 
                                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                        TRACE: parse_compound_name_list(): state = 3
                                        TERM: parse_compound_name_list(): ,: ",": 7: 32: "extracomma.k"
                                        ENTER: parse_compound_name(): 
                                            ENTER: post_token_queue(): 
                                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                            ENTER: reset_token_queue(): 
                                                ENTER: get_recovery_state(): 
                                                RETURN(parser_state->in_recovery): get_recovery_state() - (NULL)
                                                TRACE: reset_token_queue(): recover the queue
                                            RETURN: reset_token_queue(): 
                                        RETURN(node): parse_compound_name() - (NULL)
                                        ENTER: recover_error(): 
                                            TERM: recover_error(): ,: ",": 7: 32: "extracomma.k"
                                            ENTER: advance_token(): 
                                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                            TERM: recover_error(): symbol: "whoopd": 7: 39: "extracomma.k"
                                            ENTER: advance_token(): 
                                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                            TERM: recover_error(): ,: ",": 7: 40: "extracomma.k"
                                            ENTER: advance_token(): 
                                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                            TERM: recover_error(): symbol: "asd": 7: 44: "extracomma.k"
                                            ENTER: advance_token(): 
                                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                            TERM: recover_error(): .: ".": 7: 45: "extracomma.k"
                                            ENTER: advance_token(): 
                                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                            TERM: recover_error(): symbol: "qwe": 7: 48: "extracomma.k"
                                            ENTER: advance_token(): 
                                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                            TERM: recover_error(): .: ".": 7: 49: "extracomma.k"
                                            ENTER: advance_token(): 
                                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                            TERM: recover_error(): symbol: "rt": 7: 51: "extracomma.k"
                                            ENTER: advance_token(): 
                                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                            TERM: recover_error(): ): ")": 7: 52: "extracomma.k"
                                            ENTER: advance_token(): 
                                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                            ENTER: kill_token_queue(): 
                                            RETURN: kill_token_queue(): 
                                            ENTER: set_recovery_state(): 
                                            RETURN: set_recovery_state(): 
                                        RETURN: recover_error(): 
                                        TRACE: parse_compound_name_list(): state = 102
                                    RETURN(node): parse_compound_name_list() - (NULL)
                                    ENTER: recover_error(): 
                                        TERM: recover_error(): end of file: "": 9: 1: "extracomma.k"
                                        ENTER: kill_token_queue(): 
                                        RETURN: kill_token_queue(): 
                                        ENTER: set_recovery_state(): 
                                        RETURN: set_recovery_state(): 
                                    RETURN: recover_error(): 
                                RETURN(node): parse_function_reference() - (NULL)
                                ENTER: parse_create_reference(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    ENTER: parse_create_name(): 
                                        ENTER: post_token_queue(): 
                                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                        ENTER: reset_token_queue(): 
                                            ENTER: get_recovery_state(): 
                                            RETURN(parser_state->in_recovery): get_recovery_state() - (!NULL)
                                        RETURN: reset_token_queue(): 
                                    RETURN(node): parse_create_name() - (NULL)
                                    ENTER: reset_token_queue(): 
                                        ENTER: get_recovery_state(): 
                                        RETURN(parser_state->in_recovery): get_recovery_state() - (!NULL)
                                    RETURN: reset_token_queue(): 
                                RETURN(node): parse_create_reference() - (NULL)
                                ENTER: parse_destroy_reference(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    ENTER: parse_destroy_name(): 
                                        ENTER: post_token_queue(): 
                                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                        ENTER: reset_token_queue(): 
                                            ENTER: get_recovery_state(): 
                                            RETURN(parser_state->in_recovery): get_recovery_state() - (!NULL)
                                        RETURN: reset_token_queue(): 
                                    RETURN(node): parse_destroy_name() - (NULL)
                                    ENTER: reset_token_queue(): 
                                        ENTER: get_recovery_state(): 
                                        RETURN(parser_state->in_recovery): get_recovery_state() - (!NULL)
                                    RETURN: reset_token_queue(): 
                                RETURN(node): parse_destroy_reference() - (NULL)
                                ENTER: parse_while_clause(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    ENTER: parse_while_definition(): 
                                        ENTER: post_token_queue(): 
                                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                        ENTER: reset_token_queue(): 
                                            ENTER: get_recovery_state(): 
                                            RETURN(parser_state->in_recovery): get_recovery_state() - (!NULL)
                                        RETURN: reset_token_queue(): 
                                    RETURN(node): parse_while_definition() - (NULL)
                                    ENTER: reset_token_queue(): 
                                        ENTER: get_recovery_state(): 
                                        RETURN(parser_state->in_recovery): get_recovery_state() - (!NULL)
                                    RETURN: reset_token_queue(): 
                                RETURN(node): parse_while_clause() - (NULL)
                                ENTER: parse_do_clause(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    ENTER: reset_token_queue(): 
                                        ENTER: get_recovery_state(): 
                                        RETURN(parser_state->in_recovery): get_recovery_state() - (!NULL)
                                    RETURN: reset_token_queue(): 
                                RETURN(node): parse_do_clause() - (NULL)
                                ENTER: parse_for_clause(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    TRACE: parse_for_clause(): state = 0
                                    TRACE: parse_for_clause(): state = 101
                                    ENTER: reset_token_queue(): 
                                        ENTER: get_recovery_state(): 
                                        RETURN(parser_state->in_recovery): get_recovery_state() - (!NULL)
                                    RETURN: reset_token_queue(): 
                                RETURN(node): parse_for_clause() - (NULL)
                                ENTER: parse_if_clause(): 
                                RETURN(node): parse_if_clause() - (NULL)
                                ENTER: parse_try_clause(): 
                                RETURN(node): parse_try_clause() - (NULL)
                                ENTER: parse_switch_clause(): 
                                RETURN(node): parse_switch_clause() - (NULL)
                                ENTER: parse_break_statement(): 
                                RETURN(node): parse_break_statement() - (NULL)
                                ENTER: parse_continue_statement(): 
                                RETURN(node): parse_continue_statement() - (NULL)
                                ENTER: parse_inline_statement(): 
                                RETURN(node): parse_inline_statement() - (NULL)
                                ENTER: parse_yield_statement(): 
                                RETURN(node): parse_yield_statement() - (NULL)
                                ENTER: parse_type_statement(): 
                                RETURN(node): parse_type_statement() - (NULL)
                                ENTER: parse_return_statement(): 
                                RETURN(node): parse_return_statement() - (NULL)
                                ENTER: parse_raise_statement(): 
                                RETURN(node): parse_raise_statement() - (NULL)
                                ENTER: parse_function_body(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    ENTER: reset_token_queue(): 
                                        ENTER: get_recovery_state(): 
                                        RETURN(parser_state->in_recovery): get_recovery_state() - (!NULL)
                                    RETURN: reset_token_queue(): 
                                RETURN(node): parse_function_body() - (NULL)
                                ENTER: reset_token_queue(): 
                                    ENTER: get_recovery_state(): 
                                    RETURN(parser_state->in_recovery): get_recovery_state() - (!NULL)
                                RETURN: reset_token_queue(): 
                            RETURN(node): parse_function_body_element() - (NULL)
                            ENTER: recover_error(): 
                                TERM: recover_error(): end of file: "": 9: 1: "extracomma.k"
                                ENTER: kill_token_queue(): 
                                RETURN: kill_token_queue(): 
                                ENTER: set_recovery_state(): 
                                RETURN: set_recovery_state(): 
                            RETURN: recover_error(): 
                        RETURN(node): parse_function_body() - (NULL)
                        ENTER: recover_error(): 
                            TERM: recover_error(): end of file: "": 9: 1: "extracomma.k"
                            ENTER: kill_token_queue(): 
                            RETURN: kill_token_queue(): 
                            ENTER: set_recovery_state(): 
                            RETURN: set_recovery_state(): 
                        RETURN: recover_error(): 
                    RETURN(node): parse_function_definition() - (NULL)
                    ENTER: parse_create_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                            ENTER: get_recovery_state(): 
                            RETURN(parser_state->in_recovery): get_recovery_state() - (!NULL)
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_create_definition() - (NULL)
                    ENTER: parse_destroy_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                            ENTER: get_recovery_state(): 
                            RETURN(parser_state->in_recovery): get_recovery_state() - (!NULL)
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_destroy_definition() - (NULL)
                    ENTER: parse_var_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                            ENTER: get_recovery_state(): 
                            RETURN(parser_state->in_recovery): get_recovery_state() - (!NULL)
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_var_definition() - (NULL)
                    ENTER: reset_token_queue(): 
                        ENTER: get_recovery_state(): 
                        RETURN(parser_state->in_recovery): get_recovery_state() - (!NULL)
                    RETURN: reset_token_queue(): 
                RETURN(node): parse_namespace_item() - (NULL)
                ENTER: parse_import_statement(): 
                RETURN(node): parse_import_statement() - (NULL)
                ENTER: parse_start_function(): 
                    ENTER: post_token_queue(): 
                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                    ENTER: reset_token_queue(): 
                        ENTER: get_recovery_state(): 
                        RETURN(parser_state->in_recovery): get_recovery_state() - (!NULL)
                    RETURN: reset_token_queue(): 
                RETURN(node): parse_start_function() - (NULL)
                ENTER: reset_token_queue(): 
                    ENTER: get_recovery_state(): 
                    RETURN(parser_state->in_recovery): get_recovery_state() - (!NULL)
                RETURN: reset_token_queue(): 
            RETURN(node): parse_module_item() - (NULL)
            ENTER: finalize_token_queue(): 
            RETURN: finalize_token_queue(): 
            ENTER: close_file(): 
                ENTER: pop_input_file(): 
                RETURN: pop_input_file(): 
            RETURN: close_file(): 
            TRACE: parse_module(): end of file
        RETURN(node): parse_module() - (!NULL)
    RETURN(node): parse() - (!NULL)
    TRACE: main(): End Parse
    TRACE: main(): --------------------------------------------
    TRACE: main(): set trace state: true
    TRACE: main(): Begin Traverse
    ENTER: traverse_ast(): 
        TRACE: traverse_ast(): do not traverse with errors
    RETURN: traverse_ast(): 
    TRACE: main(): End Traverse
    TRACE: main(): --------------------------------------------
