
;---------------------------
;
; Here is source code of a Program to Check Whether Graph is DAG.
;
; This is not intended to actually compile but to test the syntax
; acceptance of the parser.
;
;----------------------------

number c = 0

struct adj_list {
    number dest
    ; self-referencing struct
    adj_list next
}

; hated global variables are allowed
adj_list np = 0
adj_list np1 = 0
adj_list p = 0
adj_list q = 0
; init a struct to zero redundantly inits all of the
; internals to zero as well.


struct Graph {
    int v
    adj_list ptr
}

;-------------
; Limit the type of array to a struct Graph object only
;---------------
list Graph@array


nothing addReverseEdge(number src, number dest) {

    np1.dest = src
    ; variables are always init to zero when instantiated
    ; np1.next = NULL

    if (array[dest].ptr == NULL) {
        array[dest].ptr = np1
        q = array[dest].ptr
        q->next = 0
    }
    ; this is an empty expression, which is always true.
    else {
        q = array[dest].ptr
        while (q.next != 0) {
            q = q.next
        }
        q.next = np1
    }
}

nothing addEdge(number src, number dest) {

    np.dest = dest
    np.next = 0
    if (array[src].ptr == 0) {
        array[src].ptr = np
        p = array[src].ptr
        p.next = NULL
    }
    else {
        p = array[src].ptr
        while (p.next != NULL) {
            p = p.next;
        }
        p.next = np;
    }

    ; addReverseEdge(src, dest)
}

nothing print_graph(number n) {

    number i = 0
    while (i < n) {
        print("Adjacency List of {array[i].v}: ");
        while (array[i].ptr != 0) {
            printf("{(array[i].ptr).dest} ")
            array[i].ptr = (array[i].ptr).next
        }

        printf("\n")
        i = i + 1
    }
}



number checkDAG(number n) {

    number count = 0
    number size = n - 1
    number i = 0
    number j = 0

    while(i < n) {

        if (count == size) {
            return(1)
        }

        if(array[i].ptr == 0) {
            count++
            while(j < n) {
                while (array[j].ptr != 0) {
                    if ((array[j].ptr).dest == (array[i].ptr).dest) {
                        (array[j].ptr).dest = -1
                    }
                    array[i].ptr = (array[i].ptr).next
                }
            }
        }
    }
    return(0)
}

nothing main() {

    number n = 6
    number i = 0
    print("Number of vertices: {n}\n")

    while(i < n) {
        array[i].v = i
        array[i].ptr = 0
    }

    addEdge(0, 1)
    addEdge(1, 2)
    addEdge(1, 3)
    addEdge(3, 4)
    addEdge(4, 5)
    addEdge(5, 3)
    addEdge(5, 2)
    print_graph(n)
    print("The given graph is 'Directed Acyclic Graph' :")
    if (checkDAG(n) == 1) {
        printf(" True")
    }
    else {
        printf(" False")
    }
}
