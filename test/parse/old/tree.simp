
/*
 * Syntax test for implementing trees.
 */
namespace tree_test {

    struct tree_element {
        public int value
        public tree_element left
        public tree_element right
        public int compare(int val)
        public int compare(tree_element val)
        init(int val) // init is public by default
    }

    tree_element.init(int val) {
        value = val
    }

    int tree_element.compare(int val) {
        return value - val
    }

    int tree_element.compare(tree_element val) {
        return value - val.value
    }

    struct tree {
        tree_element root
        public nothing add(int val)
        public tree_element find(int val)
        private nothing recursive_adder(tree_element elem, tree_element val)
        private tree_element recursive_finder(tree_element elem, int val)
        init(int val)
    }

    tree.init(int val) {
        root = tree_element(val)
    }

    nothing tree.recursive_adder(tree_element elem, tree_element val) {

        int cmp = compare(val)
        if(cmp > 0) {
            if(elem.right equ nothing) {
                elem.right = val
            }
            else {
                recursive_adder(elem.right, val)
            }
        }
        else(cmp < 0) {
            if(elem.left equ nothing) {
                elem.left = val
            }
            else {
                recursive_adder(elem.left, val)
            }
        }
        else {
            system.print("element \"{0}\" has already been added"(val.value))
            exit 1
        }
    }

    tree_element tree.recursive_finder(tree_element elem, int val) {

        int cmp = elem.compare(val)

        if(cmp > 0) {
            return recursive_finder(elem.right, val)
        }
        else(cmp < 0) {
            return recursive_finder(elem.left, val)
        }
        else {
            return elem
        }
    }

    nothing tree.add(int val) {
        return recursive_adder(root, tree_element(val))
    }

    tree_element tree.find(int val) {
        return recursive_finder(root, val)
    }

}

entry {

    int list lst = [6, 3, 8, 1, 0, 2, 7, 9, 4, 5]
    int idx = 1
    tree bin_tree = tree(lst[0])

    while(idx < lst.length) {
        bin_tree.add(lst[idx])
        idx = idx + 1
    }

    tree obj = bin_tree.find(8)
    system.print(obj.value)
    obj = bin_tree.find(0)
    system.print(obj.value)
    obj = bin_tree.find(5)
    system.print(obj.value)
    obj = bin_tree.find(6)
    system.print(obj.value)
}
