;------------------------
; High level verification that class syntax is accepted.
;------------------------

class first_one {}

class second_one() {}

class third_one(first_one) {}

class forth_one(first_one.second_one) {}

;---------------------------
;    Classes can accept
;        : symbol_declaration {}
;        | method_declaration {}
;        | struct_declaration {}
;        | scope_operator {}
;        | constructor_decl {}
;        | destructor_decl {}
;---------------------------

Class qwerty {
    Num number_symbol
    String aStringMethodDeclaration(num sym, this.is.a.compound.name sym)

    private
    sTrUcT keywords_are_not_case_sensitive {
        num one
        string two
        dict three
        list four
    }

    public

    ; if the constructor or destructor is named but not implemented then that
    ; is a semantics error.

    ; Multiple constructors can be defined with different parameter types.
    create(num val, num val, num val)
    create(string val, user.defined._type val)
    ; Destructor has no return type and accepts no parameters. Only one can be
    ; named.
    destroy
    ; This is a semantic error, but not a syntax error.
    destroy
}

