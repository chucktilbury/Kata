TRACE: main(): push trace state: true
ENTER: main(): 
    ENTER: init_parser(): 
        TRACE: init_parser(): file name: "/home/chuck/Src/Simple/test/parse/vars/var_definition/dummy_test.simp"
        ENTER: init_paths(): 
            ENTER: add_path(): 
                TRACE: add_path(): ./
            RETURN: add_path(): 
            ENTER: add_path(): 
                TRACE: add_path(): ../
            RETURN: add_path(): 
            ENTER: add_path(): 
                TRACE: add_path(): ../test/
            RETURN: add_path(): 
            ENTER: add_path(): 
                TRACE: add_path(): ../test/inputs/
            RETURN: add_path(): 
            ENTER: add_path(): 
                TRACE: add_path(): ../test/misc/
            RETURN: add_path(): 
            ENTER: add_path(): 
                TRACE: add_path(): ../test/parse/
            RETURN: add_path(): 
            ENTER: add_path(): 
                TRACE: add_path(): ../test/stuff/
            RETURN: add_path(): 
        RETURN: init_paths(): 
        ENTER: find_file(): 
            TRACE: find_file(): trying: /home/chuck/Src/Simple/test/parse/vars/var_definition/dummy_test.simp
            TRACE: find_file(): found: /home/chuck/Src/Simple/test/parse/vars/var_definition/dummy_test.simp
        RETURN(create_string(tmp_buf)): find_file(): (PTR)
        ENTER: init_scanner(): 
            ENTER: open_file(): 
                ENTER: push_input_file(): 
                    TRACE: push_input_file(): input file: /home/chuck/Src/Simple/test/parse/vars/var_definition/dummy_test.simp
                RETURN: push_input_file(): 
            RETURN: open_file(): 
        RETURN: init_scanner(): 
        ENTER: create_parser_state(): 
            ENTER: push_scope(): 
                TRACE: push_scope(): scope: PRIVATE
            RETURN: push_scope(): 
            ENTER: push_name(): 
                TRACE: push_name(): name: root
            RETURN: push_name(): 
        RETURN(parser_state): create_parser_state(): (PTR)
    RETURN: init_parser(): 
    TRACE: main(): --------------------------------------------
    TRACE: main(): Begin Parse
    ENTER: parse(): 
        ENTER: parse_module(): 
            ENTER: parse_module_item(): 
                ENTER: post_token_queue(): 
                RETURN((void*)tqueue->crnt): post_token_queue(): (PTR)
                ENTER: parse_namespace_item(): 
                    ENTER: post_token_queue(): 
                    RETURN((void*)tqueue->crnt): post_token_queue(): (PTR)
                    ENTER: parse_scope_operator(): 
                        TERM: parse_scope_operator(): public: "public": 5: 7: "dummy_test.simp"
                        ENTER: set_scope(): 
                            TRACE: set_scope(): scope: PUBLIC
                        RETURN: set_scope(): 
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token(): (PTR)
                    RETURN(node): parse_scope_operator(): (PTR)
                    ENTER: get_scope(): 
                    RETURN(*node): get_scope(): (NULL)
                RETURN(node): parse_namespace_item(): (PTR)
                ENTER: get_scope(): 
                RETURN(*node): get_scope(): (NULL)
            RETURN(node): parse_module_item(): (PTR)
            ENTER: parse_module_item(): 
                ENTER: post_token_queue(): 
                RETURN((void*)tqueue->crnt): post_token_queue(): (PTR)
                ENTER: parse_namespace_item(): 
                    ENTER: post_token_queue(): 
                    RETURN((void*)tqueue->crnt): post_token_queue(): (PTR)
                    ENTER: parse_scope_operator(): 
                    RETURN(node): parse_scope_operator(): (NULL)
                    ENTER: parse_namespace_definition(): 
                    RETURN(node): parse_namespace_definition(): (NULL)
                    ENTER: parse_class_definition(): 
                    RETURN(node): parse_class_definition(): (NULL)
                    ENTER: parse_function_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue(): (PTR)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_function_definition(): (NULL)
                    ENTER: parse_create_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue(): (PTR)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_create_definition(): (NULL)
                    ENTER: parse_destroy_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue(): (PTR)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_destroy_definition(): (NULL)
                    ENTER: parse_var_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue(): (PTR)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_var_definition(): (NULL)
                    ENTER: reset_token_queue(): 
                    RETURN: reset_token_queue(): 
                RETURN(node): parse_namespace_item(): (NULL)
                ENTER: parse_import_statement(): 
                RETURN(node): parse_import_statement(): (NULL)
                ENTER: parse_start_function(): 
                    ENTER: post_token_queue(): 
                    RETURN((void*)tqueue->crnt): post_token_queue(): (PTR)
                    ENTER: reset_token_queue(): 
                    RETURN: reset_token_queue(): 
                RETURN(node): parse_start_function(): (NULL)
                ENTER: reset_token_queue(): 
                RETURN: reset_token_queue(): 
            RETURN(node): parse_module_item(): (NULL)
            ENTER: finalize_token_queue(): 
            RETURN: finalize_token_queue(): 
            ENTER: close_file(): 
                ENTER: pop_input_file(): 
                RETURN: pop_input_file(): 
            RETURN: close_file(): 
            TRACE: parse_module(): end of file
        RETURN(node): parse_module(): (PTR)
    RETURN(node): parse(): (PTR)
    TRACE: main(): End Parse
    TRACE: main(): --------------------------------------------
    TRACE: main(): set trace state: true
    TRACE: main(): Begin Traverse
    ENTER: traverse_ast(): 
        ENTER: pre_test_pass_func(): 
            TRACE: pre_test_pass_func(): node type: module(3000)
        RETURN: pre_test_pass_func(): 
        ENTER: traverse_module(): 
            ENTER: pre_test_pass_func(): 
                TRACE: pre_test_pass_func(): node type: module(3000)
            RETURN: pre_test_pass_func(): 
            ENTER: traverse_module_item(): 
                ENTER: pre_test_pass_func(): 
                    TRACE: pre_test_pass_func(): node type: module_item(3001)
                RETURN: pre_test_pass_func(): 
                TRACE: traverse_module_item(): SCOPE: PUBLIC
                ENTER: traverse_namespace_item(): 
                    ENTER: pre_test_pass_func(): 
                        TRACE: pre_test_pass_func(): node type: namespace_item(3002)
                    RETURN: pre_test_pass_func(): 
                    TRACE: traverse_namespace_item(): SCOPE: PUBLIC
                    ENTER: traverse_scope_operator(): 
                        ENTER: pre_test_pass_func(): 
                            TRACE: pre_test_pass_func(): node type: scope_operator(3009)
                        RETURN: pre_test_pass_func(): 
                        TERM: traverse_scope_operator(): public: "public": 5: 7: "dummy_test.simp"
                        ENTER: post_test_pass_func(): 
                            TRACE: post_test_pass_func(): node type: scope_operator(3009)
                        RETURN: post_test_pass_func(): 
                    RETURN: traverse_scope_operator(): 
                    ENTER: post_test_pass_func(): 
                        TRACE: post_test_pass_func(): node type: namespace_item(3002)
                    RETURN: post_test_pass_func(): 
                RETURN: traverse_namespace_item(): 
                ENTER: post_test_pass_func(): 
                    TRACE: post_test_pass_func(): node type: module_item(3001)
                RETURN: post_test_pass_func(): 
            RETURN: traverse_module_item(): 
            ENTER: post_test_pass_func(): 
                TRACE: post_test_pass_func(): node type: module(3000)
            RETURN: post_test_pass_func(): 
            ENTER: post_test_pass_func(): 
                TRACE: post_test_pass_func(): node type: module(3000)
            RETURN: post_test_pass_func(): 
        RETURN: traverse_module(): 
        ENTER: post_test_pass_func(): 
            TRACE: post_test_pass_func(): node type: module(3000)
        RETURN: post_test_pass_func(): 
    RETURN: traverse_ast(): 
    TRACE: main(): End Traverse
    TRACE: main(): --------------------------------------------
