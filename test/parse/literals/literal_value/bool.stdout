TRACE: main(): push trace state: true
ENTER: main(): 
    ENTER: init_parser(): 
        TRACE: init_parser(): file name: "/home/chuck/Src/Kata/test/parse/literals/literal_value/bool.k"
        ENTER: init_paths(): 
            ENTER: add_path(): 
                TRACE: add_path(): ./
            RETURN: add_path(): 
            ENTER: add_path(): 
                TRACE: add_path(): ../
            RETURN: add_path(): 
            ENTER: add_path(): 
                TRACE: add_path(): ../test/
            RETURN: add_path(): 
            ENTER: add_path(): 
                TRACE: add_path(): ../test/inputs/
            RETURN: add_path(): 
            ENTER: add_path(): 
                TRACE: add_path(): ../test/misc/
            RETURN: add_path(): 
            ENTER: add_path(): 
                TRACE: add_path(): ../test/parse/
            RETURN: add_path(): 
            ENTER: add_path(): 
                TRACE: add_path(): ../test/stuff/
            RETURN: add_path(): 
        RETURN: init_paths(): 
        ENTER: find_file(): 
            TRACE: find_file(): trying: /home/chuck/Src/Kata/test/parse/literals/literal_value/bool.k
            TRACE: find_file(): found: /home/chuck/Src/Kata/test/parse/literals/literal_value/bool.k
        RETURN(create_string(tmp_buf)): find_file() - (!NULL)
        ENTER: init_scanner(): 
            ENTER: open_file(): 
                ENTER: push_input_file(): 
                    TRACE: push_input_file(): input file: /home/chuck/Src/Kata/test/parse/literals/literal_value/bool.k
                RETURN: push_input_file(): 
            RETURN: open_file(): 
        RETURN: init_scanner(): 
        ENTER: create_parser_state(): 
            ENTER: push_scope(): 
                TRACE: push_scope(): scope: PRIVATE
            RETURN: push_scope(): 
            ENTER: push_name(): 
                TRACE: push_name(): name: root
            RETURN: push_name(): 
        RETURN(parser_state): create_parser_state() - (!NULL)
    RETURN: init_parser(): 
    TRACE: main(): --------------------------------------------
    TRACE: main(): Begin Parse
    ENTER: parse(): 
        ENTER: parse_module(): 
            ENTER: parse_module_item(): 
                ENTER: post_token_queue(): 
                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                ENTER: parse_namespace_item(): 
                    ENTER: post_token_queue(): 
                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                    ENTER: parse_scope_operator(): 
                    RETURN(node): parse_scope_operator() - (NULL)
                    ENTER: parse_namespace_definition(): 
                    RETURN(node): parse_namespace_definition() - (NULL)
                    ENTER: parse_class_definition(): 
                    RETURN(node): parse_class_definition() - (NULL)
                    ENTER: parse_function_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_function_definition() - (NULL)
                    ENTER: parse_create_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_create_definition() - (NULL)
                    ENTER: parse_destroy_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_destroy_definition() - (NULL)
                    ENTER: parse_var_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_var_decl(): 
                            ENTER: parse_type_name(): 
                                ENTER: parse_literal_type_name(): 
                                    TERM: parse_literal_type_name(): boolean: "boolean": 16: 12: "bool.k"
                                    ENTER: advance_token(): 
                                    RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                RETURN(node): parse_literal_type_name() - (!NULL)
                                TERM: parse_type_name(): symbol: "some_name": 16: 22: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_type_name() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                            ENTER: advance_token(): 
                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        RETURN(node): parse_var_decl() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_assignment_item(): 
                            ENTER: post_token_queue(): 
                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                            ENTER: parse_expression(): 
                                ENTER: post_token_queue(): 
                                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                TRACE: parse_expression(): state: 0, stack: 0, queue: 0
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                ENTER: parse_expr_primary(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    ENTER: parse_literal_value(): 
                                        TERM: parse_literal_value(): true: "True": 16: 29: "bool.k"
                                        ENTER: advance_token(): 
                                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                    RETURN(node): parse_literal_value() - (!NULL)
                                    ENTER: finalize_token_queue(): 
                                    RETURN: finalize_token_queue(): 
                                RETURN(node): parse_expr_primary() - (!NULL)
                                TRACE: parse_expression(): state: 54, stack: 0, queue: 0
                                TRACE: parse_expression(): state: 3, stack: 0, queue: 1
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                TRACE: parse_expression(): state: 100, stack: 0, queue: 1, pcount: 0
                                TERM: parse_expression(): var: "var": 17: 4: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_expression() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                        RETURN(node): parse_assignment_item() - (!NULL)
                        ENTER: finalize_token_queue(): 
                        RETURN: finalize_token_queue(): 
                    RETURN(node): parse_var_definition() - (!NULL)
                    ENTER: get_scope(): 
                    RETURN(*node): get_scope() - (!NULL)
                RETURN(node): parse_namespace_item() - (!NULL)
                ENTER: get_scope(): 
                RETURN(*node): get_scope() - (!NULL)
            RETURN(node): parse_module_item() - (!NULL)
            ENTER: parse_module_item(): 
                ENTER: post_token_queue(): 
                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                ENTER: parse_namespace_item(): 
                    ENTER: post_token_queue(): 
                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                    ENTER: parse_scope_operator(): 
                    RETURN(node): parse_scope_operator() - (NULL)
                    ENTER: parse_namespace_definition(): 
                    RETURN(node): parse_namespace_definition() - (NULL)
                    ENTER: parse_class_definition(): 
                    RETURN(node): parse_class_definition() - (NULL)
                    ENTER: parse_function_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_function_definition() - (NULL)
                    ENTER: parse_create_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_create_definition() - (NULL)
                    ENTER: parse_destroy_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_destroy_definition() - (NULL)
                    ENTER: parse_var_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_var_decl(): 
                            ENTER: parse_type_name(): 
                                ENTER: parse_literal_type_name(): 
                                    TERM: parse_literal_type_name(): boolean: "boolean": 17: 12: "bool.k"
                                    ENTER: advance_token(): 
                                    RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                RETURN(node): parse_literal_type_name() - (!NULL)
                                TERM: parse_type_name(): symbol: "some_name": 17: 22: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_type_name() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                            ENTER: advance_token(): 
                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        RETURN(node): parse_var_decl() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_assignment_item(): 
                            ENTER: post_token_queue(): 
                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                            ENTER: parse_expression(): 
                                ENTER: post_token_queue(): 
                                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                TRACE: parse_expression(): state: 0, stack: 0, queue: 0
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                ENTER: parse_expr_primary(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    ENTER: parse_literal_value(): 
                                        TERM: parse_literal_value(): true: "TrUe": 17: 29: "bool.k"
                                        ENTER: advance_token(): 
                                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                    RETURN(node): parse_literal_value() - (!NULL)
                                    ENTER: finalize_token_queue(): 
                                    RETURN: finalize_token_queue(): 
                                RETURN(node): parse_expr_primary() - (!NULL)
                                TRACE: parse_expression(): state: 54, stack: 0, queue: 0
                                TRACE: parse_expression(): state: 3, stack: 0, queue: 1
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                TRACE: parse_expression(): state: 100, stack: 0, queue: 1, pcount: 0
                                TERM: parse_expression(): var: "var": 18: 4: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_expression() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                        RETURN(node): parse_assignment_item() - (!NULL)
                        ENTER: finalize_token_queue(): 
                        RETURN: finalize_token_queue(): 
                    RETURN(node): parse_var_definition() - (!NULL)
                    ENTER: get_scope(): 
                    RETURN(*node): get_scope() - (!NULL)
                RETURN(node): parse_namespace_item() - (!NULL)
                ENTER: get_scope(): 
                RETURN(*node): get_scope() - (!NULL)
            RETURN(node): parse_module_item() - (!NULL)
            ENTER: parse_module_item(): 
                ENTER: post_token_queue(): 
                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                ENTER: parse_namespace_item(): 
                    ENTER: post_token_queue(): 
                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                    ENTER: parse_scope_operator(): 
                    RETURN(node): parse_scope_operator() - (NULL)
                    ENTER: parse_namespace_definition(): 
                    RETURN(node): parse_namespace_definition() - (NULL)
                    ENTER: parse_class_definition(): 
                    RETURN(node): parse_class_definition() - (NULL)
                    ENTER: parse_function_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_function_definition() - (NULL)
                    ENTER: parse_create_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_create_definition() - (NULL)
                    ENTER: parse_destroy_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_destroy_definition() - (NULL)
                    ENTER: parse_var_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_var_decl(): 
                            ENTER: parse_type_name(): 
                                ENTER: parse_literal_type_name(): 
                                    TERM: parse_literal_type_name(): boolean: "boolean": 18: 12: "bool.k"
                                    ENTER: advance_token(): 
                                    RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                RETURN(node): parse_literal_type_name() - (!NULL)
                                TERM: parse_type_name(): symbol: "some_name": 18: 22: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_type_name() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                            ENTER: advance_token(): 
                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        RETURN(node): parse_var_decl() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_assignment_item(): 
                            ENTER: post_token_queue(): 
                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                            ENTER: parse_expression(): 
                                ENTER: post_token_queue(): 
                                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                TRACE: parse_expression(): state: 0, stack: 0, queue: 0
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                ENTER: parse_expr_primary(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    ENTER: parse_literal_value(): 
                                        TERM: parse_literal_value(): true: "true": 18: 29: "bool.k"
                                        ENTER: advance_token(): 
                                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                    RETURN(node): parse_literal_value() - (!NULL)
                                    ENTER: finalize_token_queue(): 
                                    RETURN: finalize_token_queue(): 
                                RETURN(node): parse_expr_primary() - (!NULL)
                                TRACE: parse_expression(): state: 54, stack: 0, queue: 0
                                TRACE: parse_expression(): state: 3, stack: 0, queue: 1
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                TRACE: parse_expression(): state: 100, stack: 0, queue: 1, pcount: 0
                                TERM: parse_expression(): var: "var": 19: 4: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_expression() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                        RETURN(node): parse_assignment_item() - (!NULL)
                        ENTER: finalize_token_queue(): 
                        RETURN: finalize_token_queue(): 
                    RETURN(node): parse_var_definition() - (!NULL)
                    ENTER: get_scope(): 
                    RETURN(*node): get_scope() - (!NULL)
                RETURN(node): parse_namespace_item() - (!NULL)
                ENTER: get_scope(): 
                RETURN(*node): get_scope() - (!NULL)
            RETURN(node): parse_module_item() - (!NULL)
            ENTER: parse_module_item(): 
                ENTER: post_token_queue(): 
                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                ENTER: parse_namespace_item(): 
                    ENTER: post_token_queue(): 
                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                    ENTER: parse_scope_operator(): 
                    RETURN(node): parse_scope_operator() - (NULL)
                    ENTER: parse_namespace_definition(): 
                    RETURN(node): parse_namespace_definition() - (NULL)
                    ENTER: parse_class_definition(): 
                    RETURN(node): parse_class_definition() - (NULL)
                    ENTER: parse_function_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_function_definition() - (NULL)
                    ENTER: parse_create_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_create_definition() - (NULL)
                    ENTER: parse_destroy_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_destroy_definition() - (NULL)
                    ENTER: parse_var_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_var_decl(): 
                            ENTER: parse_type_name(): 
                                ENTER: parse_literal_type_name(): 
                                    TERM: parse_literal_type_name(): boolean: "boolean": 19: 12: "bool.k"
                                    ENTER: advance_token(): 
                                    RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                RETURN(node): parse_literal_type_name() - (!NULL)
                                TERM: parse_type_name(): symbol: "some_name": 19: 22: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_type_name() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                            ENTER: advance_token(): 
                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        RETURN(node): parse_var_decl() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_assignment_item(): 
                            ENTER: post_token_queue(): 
                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                            ENTER: parse_expression(): 
                                ENTER: post_token_queue(): 
                                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                TRACE: parse_expression(): state: 0, stack: 0, queue: 0
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                ENTER: parse_expr_primary(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    ENTER: parse_literal_value(): 
                                        TERM: parse_literal_value(): true: "TRUE": 19: 29: "bool.k"
                                        ENTER: advance_token(): 
                                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                    RETURN(node): parse_literal_value() - (!NULL)
                                    ENTER: finalize_token_queue(): 
                                    RETURN: finalize_token_queue(): 
                                RETURN(node): parse_expr_primary() - (!NULL)
                                TRACE: parse_expression(): state: 54, stack: 0, queue: 0
                                TRACE: parse_expression(): state: 3, stack: 0, queue: 1
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                TRACE: parse_expression(): state: 100, stack: 0, queue: 1, pcount: 0
                                TERM: parse_expression(): var: "var": 20: 4: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_expression() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                        RETURN(node): parse_assignment_item() - (!NULL)
                        ENTER: finalize_token_queue(): 
                        RETURN: finalize_token_queue(): 
                    RETURN(node): parse_var_definition() - (!NULL)
                    ENTER: get_scope(): 
                    RETURN(*node): get_scope() - (!NULL)
                RETURN(node): parse_namespace_item() - (!NULL)
                ENTER: get_scope(): 
                RETURN(*node): get_scope() - (!NULL)
            RETURN(node): parse_module_item() - (!NULL)
            ENTER: parse_module_item(): 
                ENTER: post_token_queue(): 
                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                ENTER: parse_namespace_item(): 
                    ENTER: post_token_queue(): 
                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                    ENTER: parse_scope_operator(): 
                    RETURN(node): parse_scope_operator() - (NULL)
                    ENTER: parse_namespace_definition(): 
                    RETURN(node): parse_namespace_definition() - (NULL)
                    ENTER: parse_class_definition(): 
                    RETURN(node): parse_class_definition() - (NULL)
                    ENTER: parse_function_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_function_definition() - (NULL)
                    ENTER: parse_create_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_create_definition() - (NULL)
                    ENTER: parse_destroy_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_destroy_definition() - (NULL)
                    ENTER: parse_var_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_var_decl(): 
                            ENTER: parse_type_name(): 
                                ENTER: parse_literal_type_name(): 
                                    TERM: parse_literal_type_name(): boolean: "boolean": 20: 12: "bool.k"
                                    ENTER: advance_token(): 
                                    RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                RETURN(node): parse_literal_type_name() - (!NULL)
                                TERM: parse_type_name(): symbol: "some_name": 20: 22: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_type_name() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                            ENTER: advance_token(): 
                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        RETURN(node): parse_var_decl() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_assignment_item(): 
                            ENTER: post_token_queue(): 
                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                            ENTER: parse_expression(): 
                                ENTER: post_token_queue(): 
                                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                TRACE: parse_expression(): state: 0, stack: 0, queue: 0
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                ENTER: parse_expr_primary(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    ENTER: parse_literal_value(): 
                                        TERM: parse_literal_value(): on: "On": 20: 27: "bool.k"
                                        ENTER: advance_token(): 
                                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                    RETURN(node): parse_literal_value() - (!NULL)
                                    ENTER: finalize_token_queue(): 
                                    RETURN: finalize_token_queue(): 
                                RETURN(node): parse_expr_primary() - (!NULL)
                                TRACE: parse_expression(): state: 54, stack: 0, queue: 0
                                TRACE: parse_expression(): state: 3, stack: 0, queue: 1
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                TRACE: parse_expression(): state: 100, stack: 0, queue: 1, pcount: 0
                                TERM: parse_expression(): var: "var": 21: 4: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_expression() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                        RETURN(node): parse_assignment_item() - (!NULL)
                        ENTER: finalize_token_queue(): 
                        RETURN: finalize_token_queue(): 
                    RETURN(node): parse_var_definition() - (!NULL)
                    ENTER: get_scope(): 
                    RETURN(*node): get_scope() - (!NULL)
                RETURN(node): parse_namespace_item() - (!NULL)
                ENTER: get_scope(): 
                RETURN(*node): get_scope() - (!NULL)
            RETURN(node): parse_module_item() - (!NULL)
            ENTER: parse_module_item(): 
                ENTER: post_token_queue(): 
                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                ENTER: parse_namespace_item(): 
                    ENTER: post_token_queue(): 
                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                    ENTER: parse_scope_operator(): 
                    RETURN(node): parse_scope_operator() - (NULL)
                    ENTER: parse_namespace_definition(): 
                    RETURN(node): parse_namespace_definition() - (NULL)
                    ENTER: parse_class_definition(): 
                    RETURN(node): parse_class_definition() - (NULL)
                    ENTER: parse_function_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_function_definition() - (NULL)
                    ENTER: parse_create_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_create_definition() - (NULL)
                    ENTER: parse_destroy_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_destroy_definition() - (NULL)
                    ENTER: parse_var_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_var_decl(): 
                            ENTER: parse_type_name(): 
                                ENTER: parse_literal_type_name(): 
                                    TERM: parse_literal_type_name(): boolean: "boolean": 21: 12: "bool.k"
                                    ENTER: advance_token(): 
                                    RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                RETURN(node): parse_literal_type_name() - (!NULL)
                                TERM: parse_type_name(): symbol: "some_name": 21: 22: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_type_name() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                            ENTER: advance_token(): 
                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        RETURN(node): parse_var_decl() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_assignment_item(): 
                            ENTER: post_token_queue(): 
                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                            ENTER: parse_expression(): 
                                ENTER: post_token_queue(): 
                                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                TRACE: parse_expression(): state: 0, stack: 0, queue: 0
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                ENTER: parse_expr_primary(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    ENTER: parse_literal_value(): 
                                        TERM: parse_literal_value(): on: "ON": 21: 27: "bool.k"
                                        ENTER: advance_token(): 
                                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                    RETURN(node): parse_literal_value() - (!NULL)
                                    ENTER: finalize_token_queue(): 
                                    RETURN: finalize_token_queue(): 
                                RETURN(node): parse_expr_primary() - (!NULL)
                                TRACE: parse_expression(): state: 54, stack: 0, queue: 0
                                TRACE: parse_expression(): state: 3, stack: 0, queue: 1
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                TRACE: parse_expression(): state: 100, stack: 0, queue: 1, pcount: 0
                                TERM: parse_expression(): var: "var": 22: 4: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_expression() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                        RETURN(node): parse_assignment_item() - (!NULL)
                        ENTER: finalize_token_queue(): 
                        RETURN: finalize_token_queue(): 
                    RETURN(node): parse_var_definition() - (!NULL)
                    ENTER: get_scope(): 
                    RETURN(*node): get_scope() - (!NULL)
                RETURN(node): parse_namespace_item() - (!NULL)
                ENTER: get_scope(): 
                RETURN(*node): get_scope() - (!NULL)
            RETURN(node): parse_module_item() - (!NULL)
            ENTER: parse_module_item(): 
                ENTER: post_token_queue(): 
                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                ENTER: parse_namespace_item(): 
                    ENTER: post_token_queue(): 
                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                    ENTER: parse_scope_operator(): 
                    RETURN(node): parse_scope_operator() - (NULL)
                    ENTER: parse_namespace_definition(): 
                    RETURN(node): parse_namespace_definition() - (NULL)
                    ENTER: parse_class_definition(): 
                    RETURN(node): parse_class_definition() - (NULL)
                    ENTER: parse_function_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_function_definition() - (NULL)
                    ENTER: parse_create_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_create_definition() - (NULL)
                    ENTER: parse_destroy_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_destroy_definition() - (NULL)
                    ENTER: parse_var_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_var_decl(): 
                            ENTER: parse_type_name(): 
                                ENTER: parse_literal_type_name(): 
                                    TERM: parse_literal_type_name(): boolean: "boolean": 22: 12: "bool.k"
                                    ENTER: advance_token(): 
                                    RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                RETURN(node): parse_literal_type_name() - (!NULL)
                                TERM: parse_type_name(): symbol: "some_name": 22: 22: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_type_name() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                            ENTER: advance_token(): 
                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        RETURN(node): parse_var_decl() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_assignment_item(): 
                            ENTER: post_token_queue(): 
                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                            ENTER: parse_expression(): 
                                ENTER: post_token_queue(): 
                                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                TRACE: parse_expression(): state: 0, stack: 0, queue: 0
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                ENTER: parse_expr_primary(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    ENTER: parse_literal_value(): 
                                        TERM: parse_literal_value(): false: "False": 22: 30: "bool.k"
                                        ENTER: advance_token(): 
                                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                    RETURN(node): parse_literal_value() - (!NULL)
                                    ENTER: finalize_token_queue(): 
                                    RETURN: finalize_token_queue(): 
                                RETURN(node): parse_expr_primary() - (!NULL)
                                TRACE: parse_expression(): state: 54, stack: 0, queue: 0
                                TRACE: parse_expression(): state: 3, stack: 0, queue: 1
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                TRACE: parse_expression(): state: 100, stack: 0, queue: 1, pcount: 0
                                TERM: parse_expression(): var: "var": 23: 4: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_expression() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                        RETURN(node): parse_assignment_item() - (!NULL)
                        ENTER: finalize_token_queue(): 
                        RETURN: finalize_token_queue(): 
                    RETURN(node): parse_var_definition() - (!NULL)
                    ENTER: get_scope(): 
                    RETURN(*node): get_scope() - (!NULL)
                RETURN(node): parse_namespace_item() - (!NULL)
                ENTER: get_scope(): 
                RETURN(*node): get_scope() - (!NULL)
            RETURN(node): parse_module_item() - (!NULL)
            ENTER: parse_module_item(): 
                ENTER: post_token_queue(): 
                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                ENTER: parse_namespace_item(): 
                    ENTER: post_token_queue(): 
                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                    ENTER: parse_scope_operator(): 
                    RETURN(node): parse_scope_operator() - (NULL)
                    ENTER: parse_namespace_definition(): 
                    RETURN(node): parse_namespace_definition() - (NULL)
                    ENTER: parse_class_definition(): 
                    RETURN(node): parse_class_definition() - (NULL)
                    ENTER: parse_function_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_function_definition() - (NULL)
                    ENTER: parse_create_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_create_definition() - (NULL)
                    ENTER: parse_destroy_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_destroy_definition() - (NULL)
                    ENTER: parse_var_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_var_decl(): 
                            ENTER: parse_type_name(): 
                                ENTER: parse_literal_type_name(): 
                                    TERM: parse_literal_type_name(): boolean: "boolean": 23: 12: "bool.k"
                                    ENTER: advance_token(): 
                                    RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                RETURN(node): parse_literal_type_name() - (!NULL)
                                TERM: parse_type_name(): symbol: "some_name": 23: 22: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_type_name() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                            ENTER: advance_token(): 
                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        RETURN(node): parse_var_decl() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_assignment_item(): 
                            ENTER: post_token_queue(): 
                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                            ENTER: parse_expression(): 
                                ENTER: post_token_queue(): 
                                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                TRACE: parse_expression(): state: 0, stack: 0, queue: 0
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                ENTER: parse_expr_primary(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    ENTER: parse_literal_value(): 
                                        TERM: parse_literal_value(): false: "FaLsE": 23: 30: "bool.k"
                                        ENTER: advance_token(): 
                                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                    RETURN(node): parse_literal_value() - (!NULL)
                                    ENTER: finalize_token_queue(): 
                                    RETURN: finalize_token_queue(): 
                                RETURN(node): parse_expr_primary() - (!NULL)
                                TRACE: parse_expression(): state: 54, stack: 0, queue: 0
                                TRACE: parse_expression(): state: 3, stack: 0, queue: 1
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                TRACE: parse_expression(): state: 100, stack: 0, queue: 1, pcount: 0
                                TERM: parse_expression(): var: "var": 24: 4: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_expression() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                        RETURN(node): parse_assignment_item() - (!NULL)
                        ENTER: finalize_token_queue(): 
                        RETURN: finalize_token_queue(): 
                    RETURN(node): parse_var_definition() - (!NULL)
                    ENTER: get_scope(): 
                    RETURN(*node): get_scope() - (!NULL)
                RETURN(node): parse_namespace_item() - (!NULL)
                ENTER: get_scope(): 
                RETURN(*node): get_scope() - (!NULL)
            RETURN(node): parse_module_item() - (!NULL)
            ENTER: parse_module_item(): 
                ENTER: post_token_queue(): 
                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                ENTER: parse_namespace_item(): 
                    ENTER: post_token_queue(): 
                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                    ENTER: parse_scope_operator(): 
                    RETURN(node): parse_scope_operator() - (NULL)
                    ENTER: parse_namespace_definition(): 
                    RETURN(node): parse_namespace_definition() - (NULL)
                    ENTER: parse_class_definition(): 
                    RETURN(node): parse_class_definition() - (NULL)
                    ENTER: parse_function_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_function_definition() - (NULL)
                    ENTER: parse_create_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_create_definition() - (NULL)
                    ENTER: parse_destroy_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_destroy_definition() - (NULL)
                    ENTER: parse_var_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_var_decl(): 
                            ENTER: parse_type_name(): 
                                ENTER: parse_literal_type_name(): 
                                    TERM: parse_literal_type_name(): boolean: "boolean": 24: 12: "bool.k"
                                    ENTER: advance_token(): 
                                    RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                RETURN(node): parse_literal_type_name() - (!NULL)
                                TERM: parse_type_name(): symbol: "some_name": 24: 22: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_type_name() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                            ENTER: advance_token(): 
                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        RETURN(node): parse_var_decl() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_assignment_item(): 
                            ENTER: post_token_queue(): 
                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                            ENTER: parse_expression(): 
                                ENTER: post_token_queue(): 
                                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                TRACE: parse_expression(): state: 0, stack: 0, queue: 0
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                ENTER: parse_expr_primary(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    ENTER: parse_literal_value(): 
                                        TERM: parse_literal_value(): false: "false": 24: 30: "bool.k"
                                        ENTER: advance_token(): 
                                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                    RETURN(node): parse_literal_value() - (!NULL)
                                    ENTER: finalize_token_queue(): 
                                    RETURN: finalize_token_queue(): 
                                RETURN(node): parse_expr_primary() - (!NULL)
                                TRACE: parse_expression(): state: 54, stack: 0, queue: 0
                                TRACE: parse_expression(): state: 3, stack: 0, queue: 1
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                TRACE: parse_expression(): state: 100, stack: 0, queue: 1, pcount: 0
                                TERM: parse_expression(): var: "var": 25: 4: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_expression() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                        RETURN(node): parse_assignment_item() - (!NULL)
                        ENTER: finalize_token_queue(): 
                        RETURN: finalize_token_queue(): 
                    RETURN(node): parse_var_definition() - (!NULL)
                    ENTER: get_scope(): 
                    RETURN(*node): get_scope() - (!NULL)
                RETURN(node): parse_namespace_item() - (!NULL)
                ENTER: get_scope(): 
                RETURN(*node): get_scope() - (!NULL)
            RETURN(node): parse_module_item() - (!NULL)
            ENTER: parse_module_item(): 
                ENTER: post_token_queue(): 
                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                ENTER: parse_namespace_item(): 
                    ENTER: post_token_queue(): 
                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                    ENTER: parse_scope_operator(): 
                    RETURN(node): parse_scope_operator() - (NULL)
                    ENTER: parse_namespace_definition(): 
                    RETURN(node): parse_namespace_definition() - (NULL)
                    ENTER: parse_class_definition(): 
                    RETURN(node): parse_class_definition() - (NULL)
                    ENTER: parse_function_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_function_definition() - (NULL)
                    ENTER: parse_create_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_create_definition() - (NULL)
                    ENTER: parse_destroy_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_destroy_definition() - (NULL)
                    ENTER: parse_var_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_var_decl(): 
                            ENTER: parse_type_name(): 
                                ENTER: parse_literal_type_name(): 
                                    TERM: parse_literal_type_name(): boolean: "boolean": 25: 12: "bool.k"
                                    ENTER: advance_token(): 
                                    RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                RETURN(node): parse_literal_type_name() - (!NULL)
                                TERM: parse_type_name(): symbol: "some_name": 25: 22: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_type_name() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                            ENTER: advance_token(): 
                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        RETURN(node): parse_var_decl() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_assignment_item(): 
                            ENTER: post_token_queue(): 
                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                            ENTER: parse_expression(): 
                                ENTER: post_token_queue(): 
                                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                TRACE: parse_expression(): state: 0, stack: 0, queue: 0
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                ENTER: parse_expr_primary(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    ENTER: parse_literal_value(): 
                                        TERM: parse_literal_value(): false: "FALSE": 25: 30: "bool.k"
                                        ENTER: advance_token(): 
                                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                    RETURN(node): parse_literal_value() - (!NULL)
                                    ENTER: finalize_token_queue(): 
                                    RETURN: finalize_token_queue(): 
                                RETURN(node): parse_expr_primary() - (!NULL)
                                TRACE: parse_expression(): state: 54, stack: 0, queue: 0
                                TRACE: parse_expression(): state: 3, stack: 0, queue: 1
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                TRACE: parse_expression(): state: 100, stack: 0, queue: 1, pcount: 0
                                TERM: parse_expression(): var: "var": 26: 4: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_expression() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                        RETURN(node): parse_assignment_item() - (!NULL)
                        ENTER: finalize_token_queue(): 
                        RETURN: finalize_token_queue(): 
                    RETURN(node): parse_var_definition() - (!NULL)
                    ENTER: get_scope(): 
                    RETURN(*node): get_scope() - (!NULL)
                RETURN(node): parse_namespace_item() - (!NULL)
                ENTER: get_scope(): 
                RETURN(*node): get_scope() - (!NULL)
            RETURN(node): parse_module_item() - (!NULL)
            ENTER: parse_module_item(): 
                ENTER: post_token_queue(): 
                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                ENTER: parse_namespace_item(): 
                    ENTER: post_token_queue(): 
                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                    ENTER: parse_scope_operator(): 
                    RETURN(node): parse_scope_operator() - (NULL)
                    ENTER: parse_namespace_definition(): 
                    RETURN(node): parse_namespace_definition() - (NULL)
                    ENTER: parse_class_definition(): 
                    RETURN(node): parse_class_definition() - (NULL)
                    ENTER: parse_function_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_function_definition() - (NULL)
                    ENTER: parse_create_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_create_definition() - (NULL)
                    ENTER: parse_destroy_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_destroy_definition() - (NULL)
                    ENTER: parse_var_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_var_decl(): 
                            ENTER: parse_type_name(): 
                                ENTER: parse_literal_type_name(): 
                                    TERM: parse_literal_type_name(): boolean: "boolean": 26: 12: "bool.k"
                                    ENTER: advance_token(): 
                                    RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                RETURN(node): parse_literal_type_name() - (!NULL)
                                TERM: parse_type_name(): symbol: "some_name": 26: 22: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_type_name() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                            ENTER: advance_token(): 
                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        RETURN(node): parse_var_decl() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_assignment_item(): 
                            ENTER: post_token_queue(): 
                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                            ENTER: parse_expression(): 
                                ENTER: post_token_queue(): 
                                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                TRACE: parse_expression(): state: 0, stack: 0, queue: 0
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                ENTER: parse_expr_primary(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    ENTER: parse_literal_value(): 
                                        TERM: parse_literal_value(): off: "Off": 26: 28: "bool.k"
                                        ENTER: advance_token(): 
                                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                    RETURN(node): parse_literal_value() - (!NULL)
                                    ENTER: finalize_token_queue(): 
                                    RETURN: finalize_token_queue(): 
                                RETURN(node): parse_expr_primary() - (!NULL)
                                TRACE: parse_expression(): state: 54, stack: 0, queue: 0
                                TRACE: parse_expression(): state: 3, stack: 0, queue: 1
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                TRACE: parse_expression(): state: 100, stack: 0, queue: 1, pcount: 0
                                TERM: parse_expression(): var: "var": 27: 4: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_expression() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                        RETURN(node): parse_assignment_item() - (!NULL)
                        ENTER: finalize_token_queue(): 
                        RETURN: finalize_token_queue(): 
                    RETURN(node): parse_var_definition() - (!NULL)
                    ENTER: get_scope(): 
                    RETURN(*node): get_scope() - (!NULL)
                RETURN(node): parse_namespace_item() - (!NULL)
                ENTER: get_scope(): 
                RETURN(*node): get_scope() - (!NULL)
            RETURN(node): parse_module_item() - (!NULL)
            ENTER: parse_module_item(): 
                ENTER: post_token_queue(): 
                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                ENTER: parse_namespace_item(): 
                    ENTER: post_token_queue(): 
                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                    ENTER: parse_scope_operator(): 
                    RETURN(node): parse_scope_operator() - (NULL)
                    ENTER: parse_namespace_definition(): 
                    RETURN(node): parse_namespace_definition() - (NULL)
                    ENTER: parse_class_definition(): 
                    RETURN(node): parse_class_definition() - (NULL)
                    ENTER: parse_function_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_function_definition() - (NULL)
                    ENTER: parse_create_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_create_definition() - (NULL)
                    ENTER: parse_destroy_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_destroy_definition() - (NULL)
                    ENTER: parse_var_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_var_decl(): 
                            ENTER: parse_type_name(): 
                                ENTER: parse_literal_type_name(): 
                                    TERM: parse_literal_type_name(): boolean: "boolean": 27: 12: "bool.k"
                                    ENTER: advance_token(): 
                                    RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                RETURN(node): parse_literal_type_name() - (!NULL)
                                TERM: parse_type_name(): symbol: "some_name": 27: 22: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_type_name() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                            ENTER: advance_token(): 
                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        RETURN(node): parse_var_decl() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_assignment_item(): 
                            ENTER: post_token_queue(): 
                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                            ENTER: parse_expression(): 
                                ENTER: post_token_queue(): 
                                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                TRACE: parse_expression(): state: 0, stack: 0, queue: 0
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                ENTER: parse_expr_primary(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    ENTER: parse_literal_value(): 
                                        TERM: parse_literal_value(): off: "OFF": 27: 28: "bool.k"
                                        ENTER: advance_token(): 
                                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                    RETURN(node): parse_literal_value() - (!NULL)
                                    ENTER: finalize_token_queue(): 
                                    RETURN: finalize_token_queue(): 
                                RETURN(node): parse_expr_primary() - (!NULL)
                                TRACE: parse_expression(): state: 54, stack: 0, queue: 0
                                TRACE: parse_expression(): state: 3, stack: 0, queue: 1
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                TRACE: parse_expression(): state: 100, stack: 0, queue: 1, pcount: 0
                                TERM: parse_expression(): var: "var": 28: 4: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_expression() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                        RETURN(node): parse_assignment_item() - (!NULL)
                        ENTER: finalize_token_queue(): 
                        RETURN: finalize_token_queue(): 
                    RETURN(node): parse_var_definition() - (!NULL)
                    ENTER: get_scope(): 
                    RETURN(*node): get_scope() - (!NULL)
                RETURN(node): parse_namespace_item() - (!NULL)
                ENTER: get_scope(): 
                RETURN(*node): get_scope() - (!NULL)
            RETURN(node): parse_module_item() - (!NULL)
            ENTER: parse_module_item(): 
                ENTER: post_token_queue(): 
                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                ENTER: parse_namespace_item(): 
                    ENTER: post_token_queue(): 
                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                    ENTER: parse_scope_operator(): 
                    RETURN(node): parse_scope_operator() - (NULL)
                    ENTER: parse_namespace_definition(): 
                    RETURN(node): parse_namespace_definition() - (NULL)
                    ENTER: parse_class_definition(): 
                    RETURN(node): parse_class_definition() - (NULL)
                    ENTER: parse_function_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_function_definition() - (NULL)
                    ENTER: parse_create_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_create_definition() - (NULL)
                    ENTER: parse_destroy_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_destroy_definition() - (NULL)
                    ENTER: parse_var_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_var_decl(): 
                            ENTER: parse_type_name(): 
                                ENTER: parse_literal_type_name(): 
                                    TERM: parse_literal_type_name(): boolean: "boolean": 28: 12: "bool.k"
                                    ENTER: advance_token(): 
                                    RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                RETURN(node): parse_literal_type_name() - (!NULL)
                                TERM: parse_type_name(): symbol: "some_name": 28: 22: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_type_name() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                            ENTER: advance_token(): 
                            RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        RETURN(node): parse_var_decl() - (!NULL)
                        ENTER: advance_token(): 
                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                        ENTER: parse_assignment_item(): 
                            ENTER: post_token_queue(): 
                            RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                            ENTER: parse_expression(): 
                                ENTER: post_token_queue(): 
                                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                TRACE: parse_expression(): state: 0, stack: 0, queue: 0
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                ENTER: parse_expr_primary(): 
                                    ENTER: post_token_queue(): 
                                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                                    ENTER: parse_literal_value(): 
                                        TERM: parse_literal_value(): off: "OfF": 28: 28: "bool.k"
                                        ENTER: advance_token(): 
                                        RETURN(tqueue->crnt->tok): advance_token() - (!NULL)
                                    RETURN(node): parse_literal_value() - (!NULL)
                                    ENTER: finalize_token_queue(): 
                                    RETURN: finalize_token_queue(): 
                                RETURN(node): parse_expr_primary() - (!NULL)
                                TRACE: parse_expression(): state: 54, stack: 0, queue: 0
                                TRACE: parse_expression(): state: 3, stack: 0, queue: 1
                                ENTER: parse_operator(): 
                                RETURN(node): parse_operator() - (NULL)
                                TRACE: parse_expression(): state: 100, stack: 0, queue: 1, pcount: 0
                                TERM: parse_expression(): end of file: "": 30: 1: "bool.k"
                                ENTER: finalize_token_queue(): 
                                RETURN: finalize_token_queue(): 
                            RETURN(node): parse_expression() - (!NULL)
                            ENTER: finalize_token_queue(): 
                            RETURN: finalize_token_queue(): 
                        RETURN(node): parse_assignment_item() - (!NULL)
                        ENTER: finalize_token_queue(): 
                        RETURN: finalize_token_queue(): 
                    RETURN(node): parse_var_definition() - (!NULL)
                    ENTER: get_scope(): 
                    RETURN(*node): get_scope() - (!NULL)
                RETURN(node): parse_namespace_item() - (!NULL)
                ENTER: get_scope(): 
                RETURN(*node): get_scope() - (!NULL)
            RETURN(node): parse_module_item() - (!NULL)
            ENTER: parse_module_item(): 
                ENTER: post_token_queue(): 
                RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                ENTER: parse_namespace_item(): 
                    ENTER: post_token_queue(): 
                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                    ENTER: parse_scope_operator(): 
                    RETURN(node): parse_scope_operator() - (NULL)
                    ENTER: parse_namespace_definition(): 
                    RETURN(node): parse_namespace_definition() - (NULL)
                    ENTER: parse_class_definition(): 
                    RETURN(node): parse_class_definition() - (NULL)
                    ENTER: parse_function_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_function_definition() - (NULL)
                    ENTER: parse_create_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_create_definition() - (NULL)
                    ENTER: parse_destroy_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_destroy_definition() - (NULL)
                    ENTER: parse_var_definition(): 
                        ENTER: post_token_queue(): 
                        RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                        ENTER: reset_token_queue(): 
                        RETURN: reset_token_queue(): 
                    RETURN(node): parse_var_definition() - (NULL)
                    ENTER: reset_token_queue(): 
                    RETURN: reset_token_queue(): 
                RETURN(node): parse_namespace_item() - (NULL)
                ENTER: parse_import_statement(): 
                RETURN(node): parse_import_statement() - (NULL)
                ENTER: parse_start_function(): 
                    ENTER: post_token_queue(): 
                    RETURN((void*)tqueue->crnt): post_token_queue() - (!NULL)
                    ENTER: reset_token_queue(): 
                    RETURN: reset_token_queue(): 
                RETURN(node): parse_start_function() - (NULL)
                ENTER: reset_token_queue(): 
                RETURN: reset_token_queue(): 
            RETURN(node): parse_module_item() - (NULL)
            ENTER: finalize_token_queue(): 
            RETURN: finalize_token_queue(): 
            ENTER: close_file(): 
                ENTER: pop_input_file(): 
                RETURN: pop_input_file(): 
            RETURN: close_file(): 
            TRACE: parse_module(): end of file
        RETURN(node): parse_module() - (!NULL)
    RETURN(node): parse() - (!NULL)
    TRACE: main(): End Parse
    TRACE: main(): --------------------------------------------
    TRACE: main(): set trace state: true
    TRACE: main(): Begin Traverse
    ENTER: traverse_ast(): 
        ENTER: pre_test_pass_func(): 
            TRACE: pre_test_pass_func(): node type: module(3000)
        RETURN: pre_test_pass_func(): 
        ENTER: traverse_module(): 
            ENTER: pre_test_pass_func(): 
                TRACE: pre_test_pass_func(): node type: module(3000)
            RETURN: pre_test_pass_func(): 
            ENTER: traverse_module_item(): 
                ENTER: pre_test_pass_func(): 
                    TRACE: pre_test_pass_func(): node type: module_item(3001)
                RETURN: pre_test_pass_func(): 
                TRACE: traverse_module_item(): SCOPE: PRIVATE
                ENTER: traverse_namespace_item(): 
                    ENTER: pre_test_pass_func(): 
                        TRACE: pre_test_pass_func(): node type: namespace_item(3002)
                    RETURN: pre_test_pass_func(): 
                    TRACE: traverse_namespace_item(): SCOPE: PRIVATE
                    ENTER: traverse_var_definition(): 
                        ENTER: pre_test_pass_func(): 
                            TRACE: pre_test_pass_func(): node type: var_definition(3019)
                        RETURN: pre_test_pass_func(): 
                        ENTER: traverse_var_decl(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: var_decl(3017)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_type_name(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: type_name(3012)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_literal_type_name(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: pre_test_pass_func(): 
                                    TERM: traverse_literal_type_name(): boolean: "boolean": 16: 12: "bool.k"
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_literal_type_name(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: type_name(3012)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_type_name(): 
                            TRACE: traverse_var_decl(): is_const: false
                            TERM: traverse_var_decl(): symbol: "some_name": 16: 22: "bool.k"
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: var_decl(3017)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_var_decl(): 
                        TRACE: traverse_var_definition(): is_assigned: true
                        ENTER: traverse_assignment_item(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: assignment_item(3041)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_expression(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: expression(3038)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_expr_primary(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: pre_test_pass_func(): 
                                    ENTER: traverse_literal_value(): 
                                        ENTER: pre_test_pass_func(): 
                                            TRACE: pre_test_pass_func(): node type: literal_value(3011)
                                        RETURN: pre_test_pass_func(): 
                                        TERM: traverse_literal_value(): true: "True": 16: 29: "bool.k"
                                        ENTER: post_test_pass_func(): 
                                            TRACE: post_test_pass_func(): node type: literal_value(3011)
                                        RETURN: post_test_pass_func(): 
                                    RETURN: traverse_literal_value(): 
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_expr_primary(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: expression(3038)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_expression(): 
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: assignment_item(3041)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_assignment_item(): 
                        ENTER: post_test_pass_func(): 
                            TRACE: post_test_pass_func(): node type: var_definition(3019)
                        RETURN: post_test_pass_func(): 
                    RETURN: traverse_var_definition(): 
                    ENTER: post_test_pass_func(): 
                        TRACE: post_test_pass_func(): node type: namespace_item(3002)
                    RETURN: post_test_pass_func(): 
                RETURN: traverse_namespace_item(): 
                ENTER: post_test_pass_func(): 
                    TRACE: post_test_pass_func(): node type: module_item(3001)
                RETURN: post_test_pass_func(): 
            RETURN: traverse_module_item(): 
            ENTER: traverse_module_item(): 
                ENTER: pre_test_pass_func(): 
                    TRACE: pre_test_pass_func(): node type: module_item(3001)
                RETURN: pre_test_pass_func(): 
                TRACE: traverse_module_item(): SCOPE: PRIVATE
                ENTER: traverse_namespace_item(): 
                    ENTER: pre_test_pass_func(): 
                        TRACE: pre_test_pass_func(): node type: namespace_item(3002)
                    RETURN: pre_test_pass_func(): 
                    TRACE: traverse_namespace_item(): SCOPE: PRIVATE
                    ENTER: traverse_var_definition(): 
                        ENTER: pre_test_pass_func(): 
                            TRACE: pre_test_pass_func(): node type: var_definition(3019)
                        RETURN: pre_test_pass_func(): 
                        ENTER: traverse_var_decl(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: var_decl(3017)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_type_name(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: type_name(3012)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_literal_type_name(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: pre_test_pass_func(): 
                                    TERM: traverse_literal_type_name(): boolean: "boolean": 17: 12: "bool.k"
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_literal_type_name(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: type_name(3012)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_type_name(): 
                            TRACE: traverse_var_decl(): is_const: false
                            TERM: traverse_var_decl(): symbol: "some_name": 17: 22: "bool.k"
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: var_decl(3017)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_var_decl(): 
                        TRACE: traverse_var_definition(): is_assigned: true
                        ENTER: traverse_assignment_item(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: assignment_item(3041)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_expression(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: expression(3038)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_expr_primary(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: pre_test_pass_func(): 
                                    ENTER: traverse_literal_value(): 
                                        ENTER: pre_test_pass_func(): 
                                            TRACE: pre_test_pass_func(): node type: literal_value(3011)
                                        RETURN: pre_test_pass_func(): 
                                        TERM: traverse_literal_value(): true: "TrUe": 17: 29: "bool.k"
                                        ENTER: post_test_pass_func(): 
                                            TRACE: post_test_pass_func(): node type: literal_value(3011)
                                        RETURN: post_test_pass_func(): 
                                    RETURN: traverse_literal_value(): 
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_expr_primary(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: expression(3038)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_expression(): 
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: assignment_item(3041)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_assignment_item(): 
                        ENTER: post_test_pass_func(): 
                            TRACE: post_test_pass_func(): node type: var_definition(3019)
                        RETURN: post_test_pass_func(): 
                    RETURN: traverse_var_definition(): 
                    ENTER: post_test_pass_func(): 
                        TRACE: post_test_pass_func(): node type: namespace_item(3002)
                    RETURN: post_test_pass_func(): 
                RETURN: traverse_namespace_item(): 
                ENTER: post_test_pass_func(): 
                    TRACE: post_test_pass_func(): node type: module_item(3001)
                RETURN: post_test_pass_func(): 
            RETURN: traverse_module_item(): 
            ENTER: traverse_module_item(): 
                ENTER: pre_test_pass_func(): 
                    TRACE: pre_test_pass_func(): node type: module_item(3001)
                RETURN: pre_test_pass_func(): 
                TRACE: traverse_module_item(): SCOPE: PRIVATE
                ENTER: traverse_namespace_item(): 
                    ENTER: pre_test_pass_func(): 
                        TRACE: pre_test_pass_func(): node type: namespace_item(3002)
                    RETURN: pre_test_pass_func(): 
                    TRACE: traverse_namespace_item(): SCOPE: PRIVATE
                    ENTER: traverse_var_definition(): 
                        ENTER: pre_test_pass_func(): 
                            TRACE: pre_test_pass_func(): node type: var_definition(3019)
                        RETURN: pre_test_pass_func(): 
                        ENTER: traverse_var_decl(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: var_decl(3017)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_type_name(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: type_name(3012)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_literal_type_name(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: pre_test_pass_func(): 
                                    TERM: traverse_literal_type_name(): boolean: "boolean": 18: 12: "bool.k"
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_literal_type_name(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: type_name(3012)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_type_name(): 
                            TRACE: traverse_var_decl(): is_const: false
                            TERM: traverse_var_decl(): symbol: "some_name": 18: 22: "bool.k"
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: var_decl(3017)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_var_decl(): 
                        TRACE: traverse_var_definition(): is_assigned: true
                        ENTER: traverse_assignment_item(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: assignment_item(3041)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_expression(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: expression(3038)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_expr_primary(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: pre_test_pass_func(): 
                                    ENTER: traverse_literal_value(): 
                                        ENTER: pre_test_pass_func(): 
                                            TRACE: pre_test_pass_func(): node type: literal_value(3011)
                                        RETURN: pre_test_pass_func(): 
                                        TERM: traverse_literal_value(): true: "true": 18: 29: "bool.k"
                                        ENTER: post_test_pass_func(): 
                                            TRACE: post_test_pass_func(): node type: literal_value(3011)
                                        RETURN: post_test_pass_func(): 
                                    RETURN: traverse_literal_value(): 
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_expr_primary(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: expression(3038)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_expression(): 
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: assignment_item(3041)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_assignment_item(): 
                        ENTER: post_test_pass_func(): 
                            TRACE: post_test_pass_func(): node type: var_definition(3019)
                        RETURN: post_test_pass_func(): 
                    RETURN: traverse_var_definition(): 
                    ENTER: post_test_pass_func(): 
                        TRACE: post_test_pass_func(): node type: namespace_item(3002)
                    RETURN: post_test_pass_func(): 
                RETURN: traverse_namespace_item(): 
                ENTER: post_test_pass_func(): 
                    TRACE: post_test_pass_func(): node type: module_item(3001)
                RETURN: post_test_pass_func(): 
            RETURN: traverse_module_item(): 
            ENTER: traverse_module_item(): 
                ENTER: pre_test_pass_func(): 
                    TRACE: pre_test_pass_func(): node type: module_item(3001)
                RETURN: pre_test_pass_func(): 
                TRACE: traverse_module_item(): SCOPE: PRIVATE
                ENTER: traverse_namespace_item(): 
                    ENTER: pre_test_pass_func(): 
                        TRACE: pre_test_pass_func(): node type: namespace_item(3002)
                    RETURN: pre_test_pass_func(): 
                    TRACE: traverse_namespace_item(): SCOPE: PRIVATE
                    ENTER: traverse_var_definition(): 
                        ENTER: pre_test_pass_func(): 
                            TRACE: pre_test_pass_func(): node type: var_definition(3019)
                        RETURN: pre_test_pass_func(): 
                        ENTER: traverse_var_decl(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: var_decl(3017)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_type_name(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: type_name(3012)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_literal_type_name(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: pre_test_pass_func(): 
                                    TERM: traverse_literal_type_name(): boolean: "boolean": 19: 12: "bool.k"
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_literal_type_name(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: type_name(3012)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_type_name(): 
                            TRACE: traverse_var_decl(): is_const: false
                            TERM: traverse_var_decl(): symbol: "some_name": 19: 22: "bool.k"
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: var_decl(3017)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_var_decl(): 
                        TRACE: traverse_var_definition(): is_assigned: true
                        ENTER: traverse_assignment_item(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: assignment_item(3041)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_expression(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: expression(3038)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_expr_primary(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: pre_test_pass_func(): 
                                    ENTER: traverse_literal_value(): 
                                        ENTER: pre_test_pass_func(): 
                                            TRACE: pre_test_pass_func(): node type: literal_value(3011)
                                        RETURN: pre_test_pass_func(): 
                                        TERM: traverse_literal_value(): true: "TRUE": 19: 29: "bool.k"
                                        ENTER: post_test_pass_func(): 
                                            TRACE: post_test_pass_func(): node type: literal_value(3011)
                                        RETURN: post_test_pass_func(): 
                                    RETURN: traverse_literal_value(): 
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_expr_primary(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: expression(3038)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_expression(): 
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: assignment_item(3041)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_assignment_item(): 
                        ENTER: post_test_pass_func(): 
                            TRACE: post_test_pass_func(): node type: var_definition(3019)
                        RETURN: post_test_pass_func(): 
                    RETURN: traverse_var_definition(): 
                    ENTER: post_test_pass_func(): 
                        TRACE: post_test_pass_func(): node type: namespace_item(3002)
                    RETURN: post_test_pass_func(): 
                RETURN: traverse_namespace_item(): 
                ENTER: post_test_pass_func(): 
                    TRACE: post_test_pass_func(): node type: module_item(3001)
                RETURN: post_test_pass_func(): 
            RETURN: traverse_module_item(): 
            ENTER: traverse_module_item(): 
                ENTER: pre_test_pass_func(): 
                    TRACE: pre_test_pass_func(): node type: module_item(3001)
                RETURN: pre_test_pass_func(): 
                TRACE: traverse_module_item(): SCOPE: PRIVATE
                ENTER: traverse_namespace_item(): 
                    ENTER: pre_test_pass_func(): 
                        TRACE: pre_test_pass_func(): node type: namespace_item(3002)
                    RETURN: pre_test_pass_func(): 
                    TRACE: traverse_namespace_item(): SCOPE: PRIVATE
                    ENTER: traverse_var_definition(): 
                        ENTER: pre_test_pass_func(): 
                            TRACE: pre_test_pass_func(): node type: var_definition(3019)
                        RETURN: pre_test_pass_func(): 
                        ENTER: traverse_var_decl(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: var_decl(3017)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_type_name(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: type_name(3012)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_literal_type_name(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: pre_test_pass_func(): 
                                    TERM: traverse_literal_type_name(): boolean: "boolean": 20: 12: "bool.k"
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_literal_type_name(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: type_name(3012)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_type_name(): 
                            TRACE: traverse_var_decl(): is_const: false
                            TERM: traverse_var_decl(): symbol: "some_name": 20: 22: "bool.k"
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: var_decl(3017)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_var_decl(): 
                        TRACE: traverse_var_definition(): is_assigned: true
                        ENTER: traverse_assignment_item(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: assignment_item(3041)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_expression(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: expression(3038)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_expr_primary(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: pre_test_pass_func(): 
                                    ENTER: traverse_literal_value(): 
                                        ENTER: pre_test_pass_func(): 
                                            TRACE: pre_test_pass_func(): node type: literal_value(3011)
                                        RETURN: pre_test_pass_func(): 
                                        TERM: traverse_literal_value(): on: "On": 20: 27: "bool.k"
                                        ENTER: post_test_pass_func(): 
                                            TRACE: post_test_pass_func(): node type: literal_value(3011)
                                        RETURN: post_test_pass_func(): 
                                    RETURN: traverse_literal_value(): 
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_expr_primary(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: expression(3038)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_expression(): 
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: assignment_item(3041)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_assignment_item(): 
                        ENTER: post_test_pass_func(): 
                            TRACE: post_test_pass_func(): node type: var_definition(3019)
                        RETURN: post_test_pass_func(): 
                    RETURN: traverse_var_definition(): 
                    ENTER: post_test_pass_func(): 
                        TRACE: post_test_pass_func(): node type: namespace_item(3002)
                    RETURN: post_test_pass_func(): 
                RETURN: traverse_namespace_item(): 
                ENTER: post_test_pass_func(): 
                    TRACE: post_test_pass_func(): node type: module_item(3001)
                RETURN: post_test_pass_func(): 
            RETURN: traverse_module_item(): 
            ENTER: traverse_module_item(): 
                ENTER: pre_test_pass_func(): 
                    TRACE: pre_test_pass_func(): node type: module_item(3001)
                RETURN: pre_test_pass_func(): 
                TRACE: traverse_module_item(): SCOPE: PRIVATE
                ENTER: traverse_namespace_item(): 
                    ENTER: pre_test_pass_func(): 
                        TRACE: pre_test_pass_func(): node type: namespace_item(3002)
                    RETURN: pre_test_pass_func(): 
                    TRACE: traverse_namespace_item(): SCOPE: PRIVATE
                    ENTER: traverse_var_definition(): 
                        ENTER: pre_test_pass_func(): 
                            TRACE: pre_test_pass_func(): node type: var_definition(3019)
                        RETURN: pre_test_pass_func(): 
                        ENTER: traverse_var_decl(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: var_decl(3017)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_type_name(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: type_name(3012)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_literal_type_name(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: pre_test_pass_func(): 
                                    TERM: traverse_literal_type_name(): boolean: "boolean": 21: 12: "bool.k"
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_literal_type_name(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: type_name(3012)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_type_name(): 
                            TRACE: traverse_var_decl(): is_const: false
                            TERM: traverse_var_decl(): symbol: "some_name": 21: 22: "bool.k"
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: var_decl(3017)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_var_decl(): 
                        TRACE: traverse_var_definition(): is_assigned: true
                        ENTER: traverse_assignment_item(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: assignment_item(3041)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_expression(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: expression(3038)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_expr_primary(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: pre_test_pass_func(): 
                                    ENTER: traverse_literal_value(): 
                                        ENTER: pre_test_pass_func(): 
                                            TRACE: pre_test_pass_func(): node type: literal_value(3011)
                                        RETURN: pre_test_pass_func(): 
                                        TERM: traverse_literal_value(): on: "ON": 21: 27: "bool.k"
                                        ENTER: post_test_pass_func(): 
                                            TRACE: post_test_pass_func(): node type: literal_value(3011)
                                        RETURN: post_test_pass_func(): 
                                    RETURN: traverse_literal_value(): 
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_expr_primary(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: expression(3038)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_expression(): 
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: assignment_item(3041)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_assignment_item(): 
                        ENTER: post_test_pass_func(): 
                            TRACE: post_test_pass_func(): node type: var_definition(3019)
                        RETURN: post_test_pass_func(): 
                    RETURN: traverse_var_definition(): 
                    ENTER: post_test_pass_func(): 
                        TRACE: post_test_pass_func(): node type: namespace_item(3002)
                    RETURN: post_test_pass_func(): 
                RETURN: traverse_namespace_item(): 
                ENTER: post_test_pass_func(): 
                    TRACE: post_test_pass_func(): node type: module_item(3001)
                RETURN: post_test_pass_func(): 
            RETURN: traverse_module_item(): 
            ENTER: traverse_module_item(): 
                ENTER: pre_test_pass_func(): 
                    TRACE: pre_test_pass_func(): node type: module_item(3001)
                RETURN: pre_test_pass_func(): 
                TRACE: traverse_module_item(): SCOPE: PRIVATE
                ENTER: traverse_namespace_item(): 
                    ENTER: pre_test_pass_func(): 
                        TRACE: pre_test_pass_func(): node type: namespace_item(3002)
                    RETURN: pre_test_pass_func(): 
                    TRACE: traverse_namespace_item(): SCOPE: PRIVATE
                    ENTER: traverse_var_definition(): 
                        ENTER: pre_test_pass_func(): 
                            TRACE: pre_test_pass_func(): node type: var_definition(3019)
                        RETURN: pre_test_pass_func(): 
                        ENTER: traverse_var_decl(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: var_decl(3017)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_type_name(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: type_name(3012)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_literal_type_name(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: pre_test_pass_func(): 
                                    TERM: traverse_literal_type_name(): boolean: "boolean": 22: 12: "bool.k"
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_literal_type_name(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: type_name(3012)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_type_name(): 
                            TRACE: traverse_var_decl(): is_const: false
                            TERM: traverse_var_decl(): symbol: "some_name": 22: 22: "bool.k"
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: var_decl(3017)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_var_decl(): 
                        TRACE: traverse_var_definition(): is_assigned: true
                        ENTER: traverse_assignment_item(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: assignment_item(3041)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_expression(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: expression(3038)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_expr_primary(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: pre_test_pass_func(): 
                                    ENTER: traverse_literal_value(): 
                                        ENTER: pre_test_pass_func(): 
                                            TRACE: pre_test_pass_func(): node type: literal_value(3011)
                                        RETURN: pre_test_pass_func(): 
                                        TERM: traverse_literal_value(): false: "False": 22: 30: "bool.k"
                                        ENTER: post_test_pass_func(): 
                                            TRACE: post_test_pass_func(): node type: literal_value(3011)
                                        RETURN: post_test_pass_func(): 
                                    RETURN: traverse_literal_value(): 
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_expr_primary(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: expression(3038)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_expression(): 
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: assignment_item(3041)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_assignment_item(): 
                        ENTER: post_test_pass_func(): 
                            TRACE: post_test_pass_func(): node type: var_definition(3019)
                        RETURN: post_test_pass_func(): 
                    RETURN: traverse_var_definition(): 
                    ENTER: post_test_pass_func(): 
                        TRACE: post_test_pass_func(): node type: namespace_item(3002)
                    RETURN: post_test_pass_func(): 
                RETURN: traverse_namespace_item(): 
                ENTER: post_test_pass_func(): 
                    TRACE: post_test_pass_func(): node type: module_item(3001)
                RETURN: post_test_pass_func(): 
            RETURN: traverse_module_item(): 
            ENTER: traverse_module_item(): 
                ENTER: pre_test_pass_func(): 
                    TRACE: pre_test_pass_func(): node type: module_item(3001)
                RETURN: pre_test_pass_func(): 
                TRACE: traverse_module_item(): SCOPE: PRIVATE
                ENTER: traverse_namespace_item(): 
                    ENTER: pre_test_pass_func(): 
                        TRACE: pre_test_pass_func(): node type: namespace_item(3002)
                    RETURN: pre_test_pass_func(): 
                    TRACE: traverse_namespace_item(): SCOPE: PRIVATE
                    ENTER: traverse_var_definition(): 
                        ENTER: pre_test_pass_func(): 
                            TRACE: pre_test_pass_func(): node type: var_definition(3019)
                        RETURN: pre_test_pass_func(): 
                        ENTER: traverse_var_decl(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: var_decl(3017)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_type_name(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: type_name(3012)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_literal_type_name(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: pre_test_pass_func(): 
                                    TERM: traverse_literal_type_name(): boolean: "boolean": 23: 12: "bool.k"
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_literal_type_name(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: type_name(3012)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_type_name(): 
                            TRACE: traverse_var_decl(): is_const: false
                            TERM: traverse_var_decl(): symbol: "some_name": 23: 22: "bool.k"
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: var_decl(3017)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_var_decl(): 
                        TRACE: traverse_var_definition(): is_assigned: true
                        ENTER: traverse_assignment_item(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: assignment_item(3041)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_expression(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: expression(3038)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_expr_primary(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: pre_test_pass_func(): 
                                    ENTER: traverse_literal_value(): 
                                        ENTER: pre_test_pass_func(): 
                                            TRACE: pre_test_pass_func(): node type: literal_value(3011)
                                        RETURN: pre_test_pass_func(): 
                                        TERM: traverse_literal_value(): false: "FaLsE": 23: 30: "bool.k"
                                        ENTER: post_test_pass_func(): 
                                            TRACE: post_test_pass_func(): node type: literal_value(3011)
                                        RETURN: post_test_pass_func(): 
                                    RETURN: traverse_literal_value(): 
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_expr_primary(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: expression(3038)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_expression(): 
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: assignment_item(3041)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_assignment_item(): 
                        ENTER: post_test_pass_func(): 
                            TRACE: post_test_pass_func(): node type: var_definition(3019)
                        RETURN: post_test_pass_func(): 
                    RETURN: traverse_var_definition(): 
                    ENTER: post_test_pass_func(): 
                        TRACE: post_test_pass_func(): node type: namespace_item(3002)
                    RETURN: post_test_pass_func(): 
                RETURN: traverse_namespace_item(): 
                ENTER: post_test_pass_func(): 
                    TRACE: post_test_pass_func(): node type: module_item(3001)
                RETURN: post_test_pass_func(): 
            RETURN: traverse_module_item(): 
            ENTER: traverse_module_item(): 
                ENTER: pre_test_pass_func(): 
                    TRACE: pre_test_pass_func(): node type: module_item(3001)
                RETURN: pre_test_pass_func(): 
                TRACE: traverse_module_item(): SCOPE: PRIVATE
                ENTER: traverse_namespace_item(): 
                    ENTER: pre_test_pass_func(): 
                        TRACE: pre_test_pass_func(): node type: namespace_item(3002)
                    RETURN: pre_test_pass_func(): 
                    TRACE: traverse_namespace_item(): SCOPE: PRIVATE
                    ENTER: traverse_var_definition(): 
                        ENTER: pre_test_pass_func(): 
                            TRACE: pre_test_pass_func(): node type: var_definition(3019)
                        RETURN: pre_test_pass_func(): 
                        ENTER: traverse_var_decl(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: var_decl(3017)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_type_name(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: type_name(3012)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_literal_type_name(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: pre_test_pass_func(): 
                                    TERM: traverse_literal_type_name(): boolean: "boolean": 24: 12: "bool.k"
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_literal_type_name(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: type_name(3012)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_type_name(): 
                            TRACE: traverse_var_decl(): is_const: false
                            TERM: traverse_var_decl(): symbol: "some_name": 24: 22: "bool.k"
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: var_decl(3017)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_var_decl(): 
                        TRACE: traverse_var_definition(): is_assigned: true
                        ENTER: traverse_assignment_item(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: assignment_item(3041)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_expression(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: expression(3038)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_expr_primary(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: pre_test_pass_func(): 
                                    ENTER: traverse_literal_value(): 
                                        ENTER: pre_test_pass_func(): 
                                            TRACE: pre_test_pass_func(): node type: literal_value(3011)
                                        RETURN: pre_test_pass_func(): 
                                        TERM: traverse_literal_value(): false: "false": 24: 30: "bool.k"
                                        ENTER: post_test_pass_func(): 
                                            TRACE: post_test_pass_func(): node type: literal_value(3011)
                                        RETURN: post_test_pass_func(): 
                                    RETURN: traverse_literal_value(): 
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_expr_primary(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: expression(3038)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_expression(): 
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: assignment_item(3041)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_assignment_item(): 
                        ENTER: post_test_pass_func(): 
                            TRACE: post_test_pass_func(): node type: var_definition(3019)
                        RETURN: post_test_pass_func(): 
                    RETURN: traverse_var_definition(): 
                    ENTER: post_test_pass_func(): 
                        TRACE: post_test_pass_func(): node type: namespace_item(3002)
                    RETURN: post_test_pass_func(): 
                RETURN: traverse_namespace_item(): 
                ENTER: post_test_pass_func(): 
                    TRACE: post_test_pass_func(): node type: module_item(3001)
                RETURN: post_test_pass_func(): 
            RETURN: traverse_module_item(): 
            ENTER: traverse_module_item(): 
                ENTER: pre_test_pass_func(): 
                    TRACE: pre_test_pass_func(): node type: module_item(3001)
                RETURN: pre_test_pass_func(): 
                TRACE: traverse_module_item(): SCOPE: PRIVATE
                ENTER: traverse_namespace_item(): 
                    ENTER: pre_test_pass_func(): 
                        TRACE: pre_test_pass_func(): node type: namespace_item(3002)
                    RETURN: pre_test_pass_func(): 
                    TRACE: traverse_namespace_item(): SCOPE: PRIVATE
                    ENTER: traverse_var_definition(): 
                        ENTER: pre_test_pass_func(): 
                            TRACE: pre_test_pass_func(): node type: var_definition(3019)
                        RETURN: pre_test_pass_func(): 
                        ENTER: traverse_var_decl(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: var_decl(3017)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_type_name(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: type_name(3012)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_literal_type_name(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: pre_test_pass_func(): 
                                    TERM: traverse_literal_type_name(): boolean: "boolean": 25: 12: "bool.k"
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_literal_type_name(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: type_name(3012)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_type_name(): 
                            TRACE: traverse_var_decl(): is_const: false
                            TERM: traverse_var_decl(): symbol: "some_name": 25: 22: "bool.k"
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: var_decl(3017)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_var_decl(): 
                        TRACE: traverse_var_definition(): is_assigned: true
                        ENTER: traverse_assignment_item(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: assignment_item(3041)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_expression(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: expression(3038)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_expr_primary(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: pre_test_pass_func(): 
                                    ENTER: traverse_literal_value(): 
                                        ENTER: pre_test_pass_func(): 
                                            TRACE: pre_test_pass_func(): node type: literal_value(3011)
                                        RETURN: pre_test_pass_func(): 
                                        TERM: traverse_literal_value(): false: "FALSE": 25: 30: "bool.k"
                                        ENTER: post_test_pass_func(): 
                                            TRACE: post_test_pass_func(): node type: literal_value(3011)
                                        RETURN: post_test_pass_func(): 
                                    RETURN: traverse_literal_value(): 
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_expr_primary(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: expression(3038)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_expression(): 
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: assignment_item(3041)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_assignment_item(): 
                        ENTER: post_test_pass_func(): 
                            TRACE: post_test_pass_func(): node type: var_definition(3019)
                        RETURN: post_test_pass_func(): 
                    RETURN: traverse_var_definition(): 
                    ENTER: post_test_pass_func(): 
                        TRACE: post_test_pass_func(): node type: namespace_item(3002)
                    RETURN: post_test_pass_func(): 
                RETURN: traverse_namespace_item(): 
                ENTER: post_test_pass_func(): 
                    TRACE: post_test_pass_func(): node type: module_item(3001)
                RETURN: post_test_pass_func(): 
            RETURN: traverse_module_item(): 
            ENTER: traverse_module_item(): 
                ENTER: pre_test_pass_func(): 
                    TRACE: pre_test_pass_func(): node type: module_item(3001)
                RETURN: pre_test_pass_func(): 
                TRACE: traverse_module_item(): SCOPE: PRIVATE
                ENTER: traverse_namespace_item(): 
                    ENTER: pre_test_pass_func(): 
                        TRACE: pre_test_pass_func(): node type: namespace_item(3002)
                    RETURN: pre_test_pass_func(): 
                    TRACE: traverse_namespace_item(): SCOPE: PRIVATE
                    ENTER: traverse_var_definition(): 
                        ENTER: pre_test_pass_func(): 
                            TRACE: pre_test_pass_func(): node type: var_definition(3019)
                        RETURN: pre_test_pass_func(): 
                        ENTER: traverse_var_decl(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: var_decl(3017)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_type_name(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: type_name(3012)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_literal_type_name(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: pre_test_pass_func(): 
                                    TERM: traverse_literal_type_name(): boolean: "boolean": 26: 12: "bool.k"
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_literal_type_name(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: type_name(3012)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_type_name(): 
                            TRACE: traverse_var_decl(): is_const: false
                            TERM: traverse_var_decl(): symbol: "some_name": 26: 22: "bool.k"
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: var_decl(3017)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_var_decl(): 
                        TRACE: traverse_var_definition(): is_assigned: true
                        ENTER: traverse_assignment_item(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: assignment_item(3041)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_expression(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: expression(3038)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_expr_primary(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: pre_test_pass_func(): 
                                    ENTER: traverse_literal_value(): 
                                        ENTER: pre_test_pass_func(): 
                                            TRACE: pre_test_pass_func(): node type: literal_value(3011)
                                        RETURN: pre_test_pass_func(): 
                                        TERM: traverse_literal_value(): off: "Off": 26: 28: "bool.k"
                                        ENTER: post_test_pass_func(): 
                                            TRACE: post_test_pass_func(): node type: literal_value(3011)
                                        RETURN: post_test_pass_func(): 
                                    RETURN: traverse_literal_value(): 
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_expr_primary(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: expression(3038)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_expression(): 
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: assignment_item(3041)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_assignment_item(): 
                        ENTER: post_test_pass_func(): 
                            TRACE: post_test_pass_func(): node type: var_definition(3019)
                        RETURN: post_test_pass_func(): 
                    RETURN: traverse_var_definition(): 
                    ENTER: post_test_pass_func(): 
                        TRACE: post_test_pass_func(): node type: namespace_item(3002)
                    RETURN: post_test_pass_func(): 
                RETURN: traverse_namespace_item(): 
                ENTER: post_test_pass_func(): 
                    TRACE: post_test_pass_func(): node type: module_item(3001)
                RETURN: post_test_pass_func(): 
            RETURN: traverse_module_item(): 
            ENTER: traverse_module_item(): 
                ENTER: pre_test_pass_func(): 
                    TRACE: pre_test_pass_func(): node type: module_item(3001)
                RETURN: pre_test_pass_func(): 
                TRACE: traverse_module_item(): SCOPE: PRIVATE
                ENTER: traverse_namespace_item(): 
                    ENTER: pre_test_pass_func(): 
                        TRACE: pre_test_pass_func(): node type: namespace_item(3002)
                    RETURN: pre_test_pass_func(): 
                    TRACE: traverse_namespace_item(): SCOPE: PRIVATE
                    ENTER: traverse_var_definition(): 
                        ENTER: pre_test_pass_func(): 
                            TRACE: pre_test_pass_func(): node type: var_definition(3019)
                        RETURN: pre_test_pass_func(): 
                        ENTER: traverse_var_decl(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: var_decl(3017)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_type_name(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: type_name(3012)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_literal_type_name(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: pre_test_pass_func(): 
                                    TERM: traverse_literal_type_name(): boolean: "boolean": 27: 12: "bool.k"
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_literal_type_name(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: type_name(3012)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_type_name(): 
                            TRACE: traverse_var_decl(): is_const: false
                            TERM: traverse_var_decl(): symbol: "some_name": 27: 22: "bool.k"
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: var_decl(3017)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_var_decl(): 
                        TRACE: traverse_var_definition(): is_assigned: true
                        ENTER: traverse_assignment_item(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: assignment_item(3041)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_expression(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: expression(3038)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_expr_primary(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: pre_test_pass_func(): 
                                    ENTER: traverse_literal_value(): 
                                        ENTER: pre_test_pass_func(): 
                                            TRACE: pre_test_pass_func(): node type: literal_value(3011)
                                        RETURN: pre_test_pass_func(): 
                                        TERM: traverse_literal_value(): off: "OFF": 27: 28: "bool.k"
                                        ENTER: post_test_pass_func(): 
                                            TRACE: post_test_pass_func(): node type: literal_value(3011)
                                        RETURN: post_test_pass_func(): 
                                    RETURN: traverse_literal_value(): 
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_expr_primary(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: expression(3038)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_expression(): 
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: assignment_item(3041)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_assignment_item(): 
                        ENTER: post_test_pass_func(): 
                            TRACE: post_test_pass_func(): node type: var_definition(3019)
                        RETURN: post_test_pass_func(): 
                    RETURN: traverse_var_definition(): 
                    ENTER: post_test_pass_func(): 
                        TRACE: post_test_pass_func(): node type: namespace_item(3002)
                    RETURN: post_test_pass_func(): 
                RETURN: traverse_namespace_item(): 
                ENTER: post_test_pass_func(): 
                    TRACE: post_test_pass_func(): node type: module_item(3001)
                RETURN: post_test_pass_func(): 
            RETURN: traverse_module_item(): 
            ENTER: traverse_module_item(): 
                ENTER: pre_test_pass_func(): 
                    TRACE: pre_test_pass_func(): node type: module_item(3001)
                RETURN: pre_test_pass_func(): 
                TRACE: traverse_module_item(): SCOPE: PRIVATE
                ENTER: traverse_namespace_item(): 
                    ENTER: pre_test_pass_func(): 
                        TRACE: pre_test_pass_func(): node type: namespace_item(3002)
                    RETURN: pre_test_pass_func(): 
                    TRACE: traverse_namespace_item(): SCOPE: PRIVATE
                    ENTER: traverse_var_definition(): 
                        ENTER: pre_test_pass_func(): 
                            TRACE: pre_test_pass_func(): node type: var_definition(3019)
                        RETURN: pre_test_pass_func(): 
                        ENTER: traverse_var_decl(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: var_decl(3017)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_type_name(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: type_name(3012)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_literal_type_name(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: pre_test_pass_func(): 
                                    TERM: traverse_literal_type_name(): boolean: "boolean": 28: 12: "bool.k"
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: literal_type_name(3010)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_literal_type_name(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: type_name(3012)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_type_name(): 
                            TRACE: traverse_var_decl(): is_const: false
                            TERM: traverse_var_decl(): symbol: "some_name": 28: 22: "bool.k"
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: var_decl(3017)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_var_decl(): 
                        TRACE: traverse_var_definition(): is_assigned: true
                        ENTER: traverse_assignment_item(): 
                            ENTER: pre_test_pass_func(): 
                                TRACE: pre_test_pass_func(): node type: assignment_item(3041)
                            RETURN: pre_test_pass_func(): 
                            ENTER: traverse_expression(): 
                                ENTER: pre_test_pass_func(): 
                                    TRACE: pre_test_pass_func(): node type: expression(3038)
                                RETURN: pre_test_pass_func(): 
                                ENTER: traverse_expr_primary(): 
                                    ENTER: pre_test_pass_func(): 
                                        TRACE: pre_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: pre_test_pass_func(): 
                                    ENTER: traverse_literal_value(): 
                                        ENTER: pre_test_pass_func(): 
                                            TRACE: pre_test_pass_func(): node type: literal_value(3011)
                                        RETURN: pre_test_pass_func(): 
                                        TERM: traverse_literal_value(): off: "OfF": 28: 28: "bool.k"
                                        ENTER: post_test_pass_func(): 
                                            TRACE: post_test_pass_func(): node type: literal_value(3011)
                                        RETURN: post_test_pass_func(): 
                                    RETURN: traverse_literal_value(): 
                                    ENTER: post_test_pass_func(): 
                                        TRACE: post_test_pass_func(): node type: expr_primary(3039)
                                    RETURN: post_test_pass_func(): 
                                RETURN: traverse_expr_primary(): 
                                ENTER: post_test_pass_func(): 
                                    TRACE: post_test_pass_func(): node type: expression(3038)
                                RETURN: post_test_pass_func(): 
                            RETURN: traverse_expression(): 
                            ENTER: post_test_pass_func(): 
                                TRACE: post_test_pass_func(): node type: assignment_item(3041)
                            RETURN: post_test_pass_func(): 
                        RETURN: traverse_assignment_item(): 
                        ENTER: post_test_pass_func(): 
                            TRACE: post_test_pass_func(): node type: var_definition(3019)
                        RETURN: post_test_pass_func(): 
                    RETURN: traverse_var_definition(): 
                    ENTER: post_test_pass_func(): 
                        TRACE: post_test_pass_func(): node type: namespace_item(3002)
                    RETURN: post_test_pass_func(): 
                RETURN: traverse_namespace_item(): 
                ENTER: post_test_pass_func(): 
                    TRACE: post_test_pass_func(): node type: module_item(3001)
                RETURN: post_test_pass_func(): 
            RETURN: traverse_module_item(): 
            ENTER: post_test_pass_func(): 
                TRACE: post_test_pass_func(): node type: module(3000)
            RETURN: post_test_pass_func(): 
            ENTER: post_test_pass_func(): 
                TRACE: post_test_pass_func(): node type: module(3000)
            RETURN: post_test_pass_func(): 
        RETURN: traverse_module(): 
        ENTER: post_test_pass_func(): 
            TRACE: post_test_pass_func(): node type: module(3000)
        RETURN: post_test_pass_func(): 
    RETURN: traverse_ast(): 
    TRACE: main(): End Traverse
    TRACE: main(): --------------------------------------------
