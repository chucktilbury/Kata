/**
 * @file keyword.h
 *
 * @brief This is a hand-written keyword list. Normally this would be
 * generated by the parser generator, but this is here to test the example
 * scanner implementation.
 *
 * @author Charles Tilbury (chucktilbury@gmail.com)
 * @version 0.0
 * @date 01-10-2024
 * @copyright Copyright (c) 2024
 */
#ifndef _KEYWORD_H
#define _KEYWORD_H

// List of every terminal symbol possible.
typedef enum {
    END_OF_INPUT,
    ERROR,
    BREAK,
    CASE,
    CONTINUE,
    CONST,
    DEFAULT,
    IMPORT,
    DO,
    ELSE,
    FOR,
    IF,
    RETURN,
    SWITCH,
    WHILE,
    IN,
    TO,
    AS,
    YIELD,
    EXIT,
    TRY,
    EXCEPT,
    RAISE,
    CTOR,
    DTOR,
    START,
    NAMESPACE,
    CLASS,
    STRUCT,
    PUBLIC,
    PRIVATE,
    PROTECTED,
    NUMBER,
    NOTHING,
    STRING,
    BOOLEAN,
    LIST,
    DICT,
    TRACE,
    PRINT,
    TYPE,
    TRUE_BOOL,
    FALSE_BOOL,
    LORE,
    GORE,
    EQU,
    NEQU,
    OR,
    AND,
    ADD_ASSIGN,
    SUB_ASSIGN,
    MUL_ASSIGN,
    DIV_ASSIGN,
    MOD_ASSIGN,
    ADD,
    SUB,
    ASSIGN,
    DIV,
    MUL,
    MOD,
    OPAREN,
    CPAREN,
    OCBRACE,
    CCBRACE,
    OSBRACE,
    CSBRACE,
    COMMA,
    DOT,
    OPBRACE,
    CPBRACE,
    COLON,
    CARAT,
    AMPER,
    INLINE,
    LITERAL_NUM,
    LITERAL_STR,
    SYMBOL,
} TokenType;

typedef struct {
    const char* str;
    TokenType type;
} KeywordList;

/**
 * @brief The keyword list is sorted by the parser generator. (me in this case)
 */
KeywordList keyword_list[] = {
    {"and", AND},
    {"as", AS},
    {"bool", BOOLEAN},
    {"boolean", BOOLEAN},
    {"break", BREAK},
    {"case", CASE},
    {"class", CLASS},
    {"const", CONST},
    {"continue", CONTINUE},
    {"create", CTOR},
    {"default", DEFAULT},
    {"destroy", DTOR},
    {"dict", DICT},
    {"do", DO},
    {"else", ELSE},
    {"except", EXCEPT},
    {"exit", EXIT},
    {"false", FALSE_BOOL},
    {"for", FOR},
    {"if", IF},
    {"import", IMPORT},
    {"in", IN},
    {"inline", INLINE},
    {"list", LIST},
    {"namespace", NAMESPACE},
    {"noth", NOTHING},
    {"nothing", NOTHING},
    {"num", NUMBER},
    {"number", NUMBER},
    {"off", FALSE_BOOL},
    {"on", TRUE_BOOL},
    {"or", OR},
    {"print", PRINT},
    {"private", PRIVATE},
    {"protected", PROTECTED},
    {"public", PUBLIC},
    {"raise", RAISE},
    {"return", RETURN},
    {"start", START},
    {"strg", STRING},
    {"string", STRING},
    {"struct", STRUCT},
    {"switch", SWITCH},
    {"to", TO},
    {"trace", TRACE},
    {"true", TRUE_BOOL},
    {"try", TRY},
    {"type", TYPE},
    {"while", WHILE},
    {"yield", YIELD},
};
#define NUM_KEYWORDS (sizeof(keyword_list)/sizeof(KeywordList))

#endif /* _KEYWORD_H */
