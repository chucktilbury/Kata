/* This file is generated with a script. Do not edit. */
#ifndef _TOKENS_H
#define _TOKENS_H
#include <stdbool.h>
#include "sstrings.h"

typedef enum {
    // markers
    TOK_END_OF_FILE,
    TOK_END_OF_INPUT,
    TOK_ERROR,
    
    // keywords
%s

    // operators
    TOK_LORE,
    TOK_GORE,
    TOK_EQU,
    TOK_NEQU,
    TOK_ADD_ASSIGN,
    TOK_SUB_ASSIGN,
    TOK_MUL_ASSIGN,
    TOK_DIV_ASSIGN,
    TOK_MOD_ASSIGN,
    TOK_ADD,
    TOK_SUB,
    TOK_ASSIGN,
    TOK_DIV,
    TOK_MUL,
    TOK_MOD,
    TOK_OPAREN,
    TOK_CPAREN,
    TOK_OCBRACE,
    TOK_CCBRACE,
    TOK_OSBRACE,
    TOK_CSBRACE,
    TOK_COMMA,
    TOK_DOT,
    TOK_OPBRACE,
    TOK_CPBRACE,
    TOK_COLON,
    TOK_CARAT,
    TOK_AMPER,

    // constructed tokens
    TOK_LITERAL_FLOAT,
    TOK_LITERAL_SIGNED,
    TOK_LITERAL_UNSIGNED,
    TOK_LITERAL_DSTR,
    TOK_LITERAL_SSTR,
    TOK_SYMBOL,
    TOK_RAW_TEXT,
    TOK_UNARY_MINUS,
} TokenType;

/**
 * @brief The parser expects a token to look like this.
 */
typedef struct {
    const char* str;
    TokenType type;
} KeywordList;

/**
 * @brief The parser expects a token to look like this.
 */
typedef struct {
    String* str;       // String that caused the token to be recognized
    TokenType type;    // Type of the token
    int line_no;       // Line number where the token was recognized
    int col_no;        // Column of the last character of the token
    const char* fname; // File name where the token was taken
} Token;

extern KeywordList keyword_list[];
extern const int num_keywords;

const char* tok_to_str(Token* tok);

#endif /* _TOKENS_H */

