#!/usr/bin/env bash

# Source the basic configuration for this shell
source $HOME/.bashrc

# Set up the project location and name
export _PROJECT_NAME=simple
#export _PROJECT_LOC=$HOME/src/$_PROJECT_NAME
export _PROJECT_LOC=`pwd`

# make some GIT shortcuts
function status {
    git status
}

function add {
    old_dir=$PWD
    if [ -z ${_PROJECT_LOC} ]; then
        echo "error: Project directory is not found."
    else
        cd $_PROJECT_LOC
        git add .
    fi
    cd $old_dir
}

function commit {
    git commit
}

function push {
    git push
}

function all {
    old_dir=$PWD
    if [ -z ${_PROJECT_LOC} ]; then
        echo "error: Project directory is not found."
    else
        cd $_PROJECT_LOC
        git add . && git commit && git push
    fi
    cd $old_dir
}

function dbg {
    if [ $# -eq 0 ]; then
        echo "error: executable name is required"
    elif [ $# -eq 1 ]; then
        echo "$1"
        kdbg $1
    elif [ $# -gt 1 ]; then
        args=("$@")
        name=${args[0]}
        unset args[0]
        kdbg -a "${args[*]}" $name 2> /dev/null &
    fi
}

## Set the cross compiler target name, should match the directory of the
## cross compiler.
#export _CROSS_TARGET=i686-elf
#export _CROSS_LOC="$HOME/opt/cross"
#export _CROSS_PATH=$_CROSS_LOC/bin

#alias gcc=$_CROSS_TARGET-gcc
#alias g++=$_CROSS_TARGET-g++
#alias ar=$_CROSS_TARGET-ar
#alias as=$_CROSS_TARGET-as
#alias ld=$_CROSS_TARGET-ld
#alias db="nemiver --last "

#export PATH=$_CROSS_PATH:$_CROSS_LOC/$_CROSS_TARGET/bin:$PATH

export PATH=$_PROJECT_LOC:$_PROJECT_LOC/bin:$_PROJECT_LOC/utils:$_PROJECT_LOC/test/scripts:$PATH
export _RUNTIME=$_PROJECT_LOC/src/runtime

PS1='\[\e[0;31m\]$_PROJECT_NAME($_BUILD_TYPE):\[\e[0m\]'$PS1
cd $_PROJECT_LOC

if [[ -d build ]]; then
    cd build
else
    mkdir build
    cd build
fi

echo $1

#cmake -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang -DCMAKE_BUILD_TYPE=$_BUILD_TYPE -G "Kate - Unix Makefiles" ..
cmake -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_BUILD_TYPE=$_BUILD_TYPE ..
